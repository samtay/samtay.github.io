<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>A heaping teaspoon of Haskell</title>
    <link href="https://samtay.github.io//atom.xml" rel="self" />
    <link href="https://samtay.github.io/" />
    <id>https://samtay.github.io//atom.xml</id>
    <author>
        <name>Sam Tay</name>
        <email>sam.chong.tay@gmail.com</email>
    </author>
    <updated>2019-03-11T00:00:00Z</updated>
    <entry>
    <title>A small use case for Deriving Via</title>
    <link href="https://samtay.github.io//articles/deriving-via.html" />
    <id>https://samtay.github.io//articles/deriving-via.html</id>
    <published>2019-03-11T00:00:00Z</published>
    <updated>2019-03-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
  <h1 class="post-title">A small use case for Deriving Via</h1>
  <span class="post-date">March 11, 2019</span>
  <div id="toc"><ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#motivation">Motivation</a></li>
<li><a href="#derivingvia">DerivingVia</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul></div>
<h2 id="introduction">Introduction</h2>
<p>I am going to show a small but practical scenario for which <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#deriving-via">DerivingVia</a>, a language extension introduced in GHC 8.6, is a natural solution. The extension is aptly named, as it extends the customizability of deriving clauses, namely to allow you to specify that a type should derive a typeclass instance <em>via</em> another type’s instance.</p>
<p>As is typical for me as a lowly software engineer that writes Haskell, as opposed to a computer scientist researching programming language theory, the description of the language extension initially seemed opaque. In hindsight, I would argue it is one of the simple-yet-still-incredibly-useful extensions.</p>
<h2 id="motivation">Motivation</h2>
<p>The motivating example that I recently came across at work is implementing an exception hierarchy. In fact, I wasn’t even writing a full blown exception hierarchy. All I wanted to do was have an exception handler that catches all exceptions that have a certain typeclass <code>HasHttpStatus</code> which looks like</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">data</span> <span class="dt">HttpStatus</span> <span class="ot">=</span> <span class="dt">HttpStatus</span></a>
<a class="sourceLine" id="cb1-2" title="2">  {<span class="ot"> httpStatusCode    ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-3" title="3">  ,<span class="ot"> httpStatusMessage ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb1-4" title="4">  }</a>
<a class="sourceLine" id="cb1-5" title="5"></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">class</span> <span class="dt">HasHttpStatus</span> e <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="ot">  toHttpStatus ::</span> e <span class="ot">-&gt;</span> <span class="dt">HttpStatus</span></a></code></pre></div>
<p>Now if I have some exceptions with natural http statuses, such as</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">data</span> <span class="dt">NotFoundError</span> <span class="ot">=</span> <span class="dt">NotFoundError</span></a>
<a class="sourceLine" id="cb2-2" title="2">  <span class="kw">deriving</span> <span class="dt">Exception</span></a>
<a class="sourceLine" id="cb2-3" title="3"></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="kw">instance</span> <span class="dt">HasHttpStatus</span> <span class="dt">NotFoundError</span></a>
<a class="sourceLine" id="cb2-5" title="5">  <span class="kw">where</span> toHttpStatus _ <span class="ot">=</span> <span class="dt">Status</span> <span class="dv">404</span> <span class="st">&quot;Not Found&quot;</span></a>
<a class="sourceLine" id="cb2-6" title="6"></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="kw">data</span> <span class="dt">UnauthorizedError</span> <span class="ot">=</span> <span class="dt">UnauthorizedError</span></a>
<a class="sourceLine" id="cb2-8" title="8">  <span class="kw">deriving</span> <span class="dt">Exception</span></a>
<a class="sourceLine" id="cb2-9" title="9"></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="kw">instance</span> <span class="dt">HasHttpStatus</span> <span class="dt">UnauthorizedError</span></a>
<a class="sourceLine" id="cb2-11" title="11">  <span class="kw">where</span> toHttpStatus _ <span class="ot">=</span> <span class="dt">Status</span> <span class="dv">401</span> <span class="st">&quot;Unauthorized&quot;</span></a></code></pre></div>
<p>Then in my route handler, surrounding my application business logic, I want to catch such errors so I can return the appropriate http status:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="ot">insertEntityRoute ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb3-2" title="2">insertEntityRoute <span class="ot">=</span> catchAppErrors <span class="op">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-3" title="3">  <span class="op">...</span></a>
<a class="sourceLine" id="cb3-4" title="4"></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="ot">catchAppErrors ::</span> <span class="dt">IO</span> () <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb3-6" title="6">catchAppErrors <span class="ot">=</span> <span class="fu">flip</span> catches</a>
<a class="sourceLine" id="cb3-7" title="7">  [ <span class="dt">Handler</span> <span class="op">$</span> \<span class="ot">e ::</span> <span class="dt">SomeHttpException</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8">      sendHttpStatus (toHttpStatus e)</a>
<a class="sourceLine" id="cb3-9" title="9">  , <span class="dt">Handler</span> <span class="op">$</span> \<span class="ot">e ::</span> <span class="dt">SomeException</span>     <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-10" title="10">      logError (<span class="st">&quot;something awful has happened: &quot;</span> <span class="op">++</span> <span class="fu">show</span> e)</a>
<a class="sourceLine" id="cb3-11" title="11">      sendHttpStatus (<span class="dt">Status</span> <span class="dv">500</span> <span class="st">&quot;Internal Server Error&quot;</span>)</a>
<a class="sourceLine" id="cb3-12" title="12">  ]</a></code></pre></div>
<p>My first attempt simply mimicked the definition of the <code>Exception</code> and <code>SomeException</code> types.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">data</span> <span class="dt">SomeHttpException</span></a>
<a class="sourceLine" id="cb4-2" title="2">  <span class="ot">=</span>  <span class="kw">forall</span> e<span class="op">.</span> (<span class="dt">Exception</span> e, <span class="dt">HasHttpStatus</span> e)</a>
<a class="sourceLine" id="cb4-3" title="3">  <span class="ot">=&gt;</span> <span class="dt">SomeHttpException</span> e</a>
<a class="sourceLine" id="cb4-4" title="4">  <span class="kw">deriving</span> <span class="dt">Typeable</span></a>
<a class="sourceLine" id="cb4-5" title="5"></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="kw">instance</span> <span class="dt">Exception</span> <span class="dt">SomeHttpException</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-7" title="7"></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">SomeHttpException</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-9" title="9">  <span class="fu">showsPrec</span> p (<span class="dt">SomeHttpException</span> e) <span class="ot">=</span> <span class="fu">showsPrec</span> p e</a>
<a class="sourceLine" id="cb4-10" title="10"></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="kw">instance</span> <span class="dt">HasHttpStatus</span> <span class="dt">SomeHttpException</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-12" title="12">  toHttpStatus (<span class="dt">SomeHttpException</span> e) <span class="ot">=</span> toHttpStatus e</a></code></pre></div>
<p>This is on the right track, but I initially (and ignorantly) thought this would be enough to use my handler above. Of course, nothing was being caught by the <code>SomeHttpException</code> handler. Instead, it became clear after looking in the <a href="http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Exception.html#t:Exception">Control.Exception</a> documentation that I would need to write custom <code>Exception</code> instances for all of my http errors. So my final pull request looked just like what the documentation advises (and is what is most likely familiar to anyone who has implemented an exception hierarchy in Haskell):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1">httpExceptionToException</a>
<a class="sourceLine" id="cb5-2" title="2"><span class="ot">  ::</span> (<span class="dt">Exception</span> e, <span class="dt">HasHttpStatus</span> e)</a>
<a class="sourceLine" id="cb5-3" title="3">  <span class="ot">=&gt;</span> e</a>
<a class="sourceLine" id="cb5-4" title="4">  <span class="ot">-&gt;</span> <span class="dt">SomeException</span></a>
<a class="sourceLine" id="cb5-5" title="5">httpExceptionToException <span class="ot">=</span> toException <span class="op">.</span> <span class="dt">SomeHttpException</span></a>
<a class="sourceLine" id="cb5-6" title="6"></a>
<a class="sourceLine" id="cb5-7" title="7">httpExceptionFromException</a>
<a class="sourceLine" id="cb5-8" title="8"><span class="ot">  ::</span> <span class="dt">Exception</span> e</a>
<a class="sourceLine" id="cb5-9" title="9">  <span class="ot">=&gt;</span> <span class="dt">SomeException</span></a>
<a class="sourceLine" id="cb5-10" title="10">  <span class="ot">-&gt;</span> <span class="dt">Maybe</span> e</a>
<a class="sourceLine" id="cb5-11" title="11">httpExceptionFromException e <span class="ot">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb5-12" title="12">  <span class="dt">SomeHttpException</span> x <span class="ot">&lt;-</span> fromException e</a>
<a class="sourceLine" id="cb5-13" title="13">  cast x</a>
<a class="sourceLine" id="cb5-14" title="14"></a>
<a class="sourceLine" id="cb5-15" title="15"><span class="kw">instance</span> <span class="dt">Exception</span> <span class="dt">NotFoundError</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-16" title="16">  toException <span class="ot">=</span> httpExceptionToException</a>
<a class="sourceLine" id="cb5-17" title="17">  fromException <span class="ot">=</span> httpExceptionFromException</a>
<a class="sourceLine" id="cb5-18" title="18"></a>
<a class="sourceLine" id="cb5-19" title="19"><span class="kw">instance</span> <span class="dt">Exception</span> <span class="dt">UnauthorizedError</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-20" title="20">  toException <span class="ot">=</span> httpExceptionToException</a>
<a class="sourceLine" id="cb5-21" title="21">  fromException <span class="ot">=</span> httpExceptionFromException</a></code></pre></div>
<p>With these <code>Exception</code> instances, my handler defined above works as expected. I didn’t like having to duplicate these instances (in my case there were quite a few more instances to write), but I trusted that this was the accepted solution since it was in the documentation and I came up dry googling for better solutions.</p>
<h2 id="derivingvia">DerivingVia</h2>
<p>However, a colleage at work (<a href="https://github.com/asivitz"><strong><span class="citation" data-cites="asivitz">@asivitz</span></strong></a> on GitHub, for credit) spotted the duplicate instances and refactored this by enabling <code>DerivingVia</code>. With this approach, we need only write an <code>Exception</code> instance for one newtype wrapper, and then we can auto-derive the rest of our http error instances via the newtype wrapper:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">newtype</span> <span class="dt">HttpException</span> e <span class="ot">=</span> <span class="dt">HttpException</span> e</a>
<a class="sourceLine" id="cb6-2" title="2"></a>
<a class="sourceLine" id="cb6-3" title="3"><span class="kw">instance</span> <span class="dt">Show</span> e <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">HttpException</span> e) <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-4" title="4">  <span class="fu">showsPrec</span> p (<span class="dt">HttpException</span> e) <span class="ot">=</span> <span class="fu">showsPrec</span> p e</a>
<a class="sourceLine" id="cb6-5" title="5"></a>
<a class="sourceLine" id="cb6-6" title="6"><span class="kw">instance</span> <span class="dt">HasHttpStatus</span> e <span class="ot">=&gt;</span> <span class="dt">HasHttpStatus</span> (<span class="dt">HttpException</span> e) <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-7" title="7">  toHttpStatus (<span class="dt">HttpException</span> e) <span class="ot">=</span> toHttpStatus e</a>
<a class="sourceLine" id="cb6-8" title="8"></a>
<a class="sourceLine" id="cb6-9" title="9"><span class="kw">instance</span> (<span class="dt">Show</span> e, <span class="dt">HasHttpStatus</span> e) <span class="ot">=&gt;</span> <span class="dt">Exception</span> (<span class="dt">HttpException</span> e)</a>
<a class="sourceLine" id="cb6-10" title="10">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-11" title="11">    toException <span class="ot">=</span> httpExceptionToException</a>
<a class="sourceLine" id="cb6-12" title="12">    fromException <span class="ot">=</span> httpExceptionFromException</a></code></pre></div>
<p>Now we can use this <code>HttpException</code> wrapper instance in our deriving clauses. The error types will instead be defined as:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="kw">data</span> <span class="dt">NotFoundError</span> <span class="ot">=</span> <span class="dt">NotFoundError</span></a>
<a class="sourceLine" id="cb7-2" title="2">  <span class="kw">deriving</span> <span class="dt">Exception</span> via (<span class="dt">HttpException</span> <span class="dt">NotFoundError</span>)</a>
<a class="sourceLine" id="cb7-3" title="3"></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="kw">data</span> <span class="dt">UnauthorizedError</span> <span class="ot">=</span> <span class="dt">UnauthorizedError</span></a>
<a class="sourceLine" id="cb7-5" title="5">  <span class="kw">deriving</span> <span class="dt">Exception</span> via (<span class="dt">HttpException</span> <span class="dt">UnauthorizedError</span>)</a></code></pre></div>
<p>The syntax is wonderfully clear here. It is evident when reading the deriving clause above that the exception instance for <code>e</code> is precisely the one that we have defined for <code>HttpException e</code>. So our <code>SomeHttpException</code> handler will still catch both of these exceptions, but we get to remove our explicit typeclass implementations.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The lesson here is that if you find yourself writing identical typeclass instances over and over, possibly accumulating a mountain of boilerplate in your codebase: stop, drop, and derive via.</p>
  <div id="disqus_thread"></div>
<script>

//  https://disqus.com/admin/universalcode/#configuration-variables
var disqus_config = function () {
  this.page.url = 'https://samtay.github.io/articles/deriving-via.html';
  this.page.identifier = 'articles/deriving-via.md';
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '//samtay.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
                            

</div>
]]></summary>
</entry>
<entry>
    <title>Introduction to Brick</title>
    <link href="https://samtay.github.io//articles/brick.html" />
    <id>https://samtay.github.io//articles/brick.html</id>
    <published>2017-06-28T00:00:00Z</published>
    <updated>2017-06-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
  <h1 class="post-title">Introduction to Brick</h1>
  <span class="post-date">June 28, 2017</span>
  <div id="toc"><ul>
<li><a href="#introduction">Introduction</a><ul>
<li><a href="#the-basic-idea">The basic idea</a></li>
</ul></li>
<li><a href="#snake">snake</a><ul>
<li><a href="#structure-of-the-app">Structure of the app</a></li>
<li><a href="#snake-1">Snake</a></li>
<li><a href="#ui">UI</a></li>
</ul></li>
<li><a href="#variable-speed">Variable speed</a></li>
<li><a href="#conclusion">Conclusion</a></li>
<li><a href="#links">Links</a></li>
</ul></div>
<h2 id="introduction">Introduction</h2>
<p>I’m going to give a short introduction to <a href="https://hackage.haskell.org/package/brick-0.18">brick</a>, a Haskell library for building terminal user interfaces. So far I’ve used <code>brick</code> to implement <a href="https://github.com/samtay/conway">Conway’s Game of Life</a> and a <a href="https://github.com/samtay/tetris">Tetris clone</a>. I’ll explain the basics, walk through an example <a href="https://github.com/samtay/snake">snake</a> application, and then explain some more complicated scenarios.</p>
<p>The first thing I’ll say is that this package has some of the most impressive documentation and resources, which makes it easy to figure out pretty much anything you need to do. I’ll try to make this useful, but I imagine if you’re reading this then it is mostly being used as a reference in addition to the existing resources:</p>
<ol type="1">
<li><a href="https://github.com/jtdaugherty/brick/tree/master/programs">Demo programs</a> (clone down to explore the code and run them locally)</li>
<li><a href="https://github.com/jtdaugherty/brick/blob/master/docs/guide.rst">User guide</a></li>
<li><a href="https://hackage.haskell.org/package/brick-0.18">Haddock docs</a></li>
<li><a href="https://groups.google.com/forum/#!forum/brick-users">Google group</a></li>
</ol>
<h3 id="the-basic-idea">The basic idea</h3>
<p><code>brick</code> is very declarative. Once your base application logic is in place, the interface is generally built by two functions: drawing and handling events. The drawing function</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="ot">appDraw ::</span> s <span class="ot">-&gt;</span> [<span class="dt">Widget</span> n]</a></code></pre></div>
<p>takes your app state <code>s</code> and produces the visuals <code>[Widget n]</code>. The handler</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1"><span class="ot">appHandleEvent ::</span> s <span class="ot">-&gt;</span> <span class="dt">BrickEvent</span> n e <span class="ot">-&gt;</span> <span class="dt">EventM</span> n (<span class="dt">Next</span> s)</a></code></pre></div>
<p>takes your app state, an event (e.g. user presses the <code>'m'</code> key), and produces the resulting app state. <em>That’s pretty much it.</em></p>
<h2 id="snake">snake</h2>
<p>We’re going to build the <a href="https://en.wikipedia.org/wiki/Snake_(video_game)">classic snake</a> game that you might recall from arcades or the first cell phones. The full source code is <a href="https://github.com/samtay/snake">here</a>. This is the end product:</p>
<p align="center">
<img src="/img/brick/snake-demo.gif" />
</p>
<h3 id="structure-of-the-app">Structure of the app</h3>
<p>The library makes it easy to separate the concerns of your application and the interface; I like to have a module with all of the core business logic that exports the core state of the app and functions for modifying it, and then have an interface module that just handles the setup, drawing, and handling events. So let’s just use the <code>simple</code> stack template and add two modules</p>
<pre><code>├── LICENSE
├── README.md
├── Setup.hs
├── snake.cabal
├── src
│   ├── Main.hs
│   ├── Snake.hs
│   └── UI.hs
└── stack.yaml</code></pre>
<p>and our dependencies to <code>test.cabal</code></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb4-1" title="1">executable snake</a>
<a class="sourceLine" id="cb4-2" title="2">  <span class="fu">hs-source-dirs:</span><span class="at">      src</span></a>
<a class="sourceLine" id="cb4-3" title="3">  <span class="fu">main-is:</span><span class="at">             Main.hs</span></a>
<a class="sourceLine" id="cb4-4" title="4">  <span class="fu">exposed-modules:</span><span class="at">     Snake</span></a>
<a class="sourceLine" id="cb4-5" title="5">                     , UI</a>
<a class="sourceLine" id="cb4-6" title="6">  <span class="fu">default-language:</span><span class="at">    Haskell2010</span></a>
<a class="sourceLine" id="cb4-7" title="7">  <span class="fu">build-depends:</span><span class="at">       base &gt;= 4.7 &amp;&amp; &lt; 5</span></a>
<a class="sourceLine" id="cb4-8" title="8">                     , brick</a>
<a class="sourceLine" id="cb4-9" title="9">                     , containers</a>
<a class="sourceLine" id="cb4-10" title="10">                     , linear</a>
<a class="sourceLine" id="cb4-11" title="11">                     , microlens</a>
<a class="sourceLine" id="cb4-12" title="12">                     , microlens-th</a>
<a class="sourceLine" id="cb4-13" title="13">                     , random</a></code></pre></div>
<h3 id="snake-1">Snake</h3>
<p>Since this tutorial is about <code>brick</code>, I’ll elide most of the implementation details of the actual game, but here are some of the key types and scaffolding:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="ot">{-# LANGUAGE TemplateHaskell, FlexibleContexts #-}</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="kw">module</span> <span class="dt">Snake</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-3" title="3"></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="kw">import</span> <span class="dt">Control.Applicative</span> ((&lt;|&gt;))</a>
<a class="sourceLine" id="cb5-5" title="5"><span class="kw">import</span> <span class="dt">Control.Monad</span> (guard)</a>
<a class="sourceLine" id="cb5-6" title="6"><span class="kw">import</span> <span class="dt">Data.Maybe</span> (fromMaybe)</a>
<a class="sourceLine" id="cb5-7" title="7"></a>
<a class="sourceLine" id="cb5-8" title="8"><span class="kw">import</span> <span class="dt">Data.Sequence</span> (<span class="dt">Seq</span>, <span class="dt">ViewL</span>(..), <span class="dt">ViewR</span>(..), (&lt;|))</a>
<a class="sourceLine" id="cb5-9" title="9"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Sequence</span> <span class="kw">as</span> <span class="dt">S</span></a>
<a class="sourceLine" id="cb5-10" title="10"><span class="kw">import</span> <span class="dt">Lens.Micro.TH</span> (makeLenses)</a>
<a class="sourceLine" id="cb5-11" title="11"><span class="kw">import</span> <span class="dt">Lens.Micro</span> ((&amp;), (.~), (%~), (^.))</a>
<a class="sourceLine" id="cb5-12" title="12"><span class="kw">import</span> <span class="dt">Linear.V2</span> (<span class="dt">V2</span>(..), _x, _y)</a>
<a class="sourceLine" id="cb5-13" title="13"><span class="kw">import</span> <span class="dt">System.Random</span> (<span class="dt">Random</span>(..), newStdGen)</a>
<a class="sourceLine" id="cb5-14" title="14"></a>
<a class="sourceLine" id="cb5-15" title="15"><span class="co">-- Types</span></a>
<a class="sourceLine" id="cb5-16" title="16"></a>
<a class="sourceLine" id="cb5-17" title="17"><span class="kw">data</span> <span class="dt">Game</span> <span class="ot">=</span> <span class="dt">Game</span></a>
<a class="sourceLine" id="cb5-18" title="18">  {<span class="ot"> _snake  ::</span> <span class="dt">Snake</span>        <span class="co">-- ^ snake as a sequence of points in R2</span></a>
<a class="sourceLine" id="cb5-19" title="19">  ,<span class="ot"> _dir    ::</span> <span class="dt">Direction</span>    <span class="co">-- ^ direction</span></a>
<a class="sourceLine" id="cb5-20" title="20">  ,<span class="ot"> _food   ::</span> <span class="dt">Coord</span>        <span class="co">-- ^ location of the food</span></a>
<a class="sourceLine" id="cb5-21" title="21">  ,<span class="ot"> _foods  ::</span> <span class="dt">Stream</span> <span class="dt">Coord</span> <span class="co">-- ^ infinite list of random food locations</span></a>
<a class="sourceLine" id="cb5-22" title="22">  ,<span class="ot"> _dead   ::</span> <span class="dt">Bool</span>         <span class="co">-- ^ game over flag</span></a>
<a class="sourceLine" id="cb5-23" title="23">  ,<span class="ot"> _paused ::</span> <span class="dt">Bool</span>         <span class="co">-- ^ paused flag</span></a>
<a class="sourceLine" id="cb5-24" title="24">  ,<span class="ot"> _score  ::</span> <span class="dt">Int</span>          <span class="co">-- ^ score</span></a>
<a class="sourceLine" id="cb5-25" title="25">  ,<span class="ot"> _frozen ::</span> <span class="dt">Bool</span>         <span class="co">-- ^ freeze to disallow duplicate turns</span></a>
<a class="sourceLine" id="cb5-26" title="26">  } <span class="kw">deriving</span> (<span class="dt">Show</span>)</a>
<a class="sourceLine" id="cb5-27" title="27"></a>
<a class="sourceLine" id="cb5-28" title="28"><span class="kw">type</span> <span class="dt">Coord</span> <span class="ot">=</span> <span class="dt">V2</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb5-29" title="29"><span class="kw">type</span> <span class="dt">Snake</span> <span class="ot">=</span> <span class="dt">Seq</span> <span class="dt">Coord</span></a>
<a class="sourceLine" id="cb5-30" title="30"></a>
<a class="sourceLine" id="cb5-31" title="31"><span class="kw">data</span> <span class="dt">Stream</span> a <span class="ot">=</span> a <span class="op">:|</span> <span class="dt">Stream</span> a</a>
<a class="sourceLine" id="cb5-32" title="32">  <span class="kw">deriving</span> (<span class="dt">Show</span>)</a>
<a class="sourceLine" id="cb5-33" title="33"></a>
<a class="sourceLine" id="cb5-34" title="34"><span class="kw">data</span> <span class="dt">Direction</span></a>
<a class="sourceLine" id="cb5-35" title="35">  <span class="ot">=</span> <span class="dt">North</span></a>
<a class="sourceLine" id="cb5-36" title="36">  <span class="op">|</span> <span class="dt">South</span></a>
<a class="sourceLine" id="cb5-37" title="37">  <span class="op">|</span> <span class="dt">East</span></a>
<a class="sourceLine" id="cb5-38" title="38">  <span class="op">|</span> <span class="dt">West</span></a>
<a class="sourceLine" id="cb5-39" title="39">  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</a></code></pre></div>
<p>All of this is pretty self-explanatory, with the possible exception of lenses if you haven’t seen them. At first glance they may seem complicated (and the underlying theory arguably is), but using them as getters and setters is very straightforward. So, if you are following along because you are writing a terminal app like this, I’d recommend using them, but they are not required to use <code>brick</code>.</p>
<p>Here are the core functions for playing the game:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="co">-- | Step forward in time</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="ot">step ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">Game</span></a>
<a class="sourceLine" id="cb6-3" title="3">step g <span class="ot">=</span> fromMaybe g <span class="op">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb6-4" title="4">  guard (<span class="fu">not</span> <span class="op">$</span> g <span class="op">^.</span> paused <span class="op">||</span> g <span class="op">^.</span> dead)</a>
<a class="sourceLine" id="cb6-5" title="5">  <span class="kw">let</span> g&#39; <span class="ot">=</span> g <span class="op">&amp;</span> frozen <span class="op">.~</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb6-6" title="6">  <span class="fu">return</span> <span class="op">.</span> fromMaybe (move g&#39;) <span class="op">$</span> die g&#39; <span class="op">&lt;|&gt;</span> eatFood g&#39;</a>
<a class="sourceLine" id="cb6-7" title="7"></a>
<a class="sourceLine" id="cb6-8" title="8"><span class="co">-- | Possibly die if next head position is disallowed</span></a>
<a class="sourceLine" id="cb6-9" title="9"><span class="ot">die ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Game</span></a>
<a class="sourceLine" id="cb6-10" title="10"></a>
<a class="sourceLine" id="cb6-11" title="11"><span class="co">-- | Possibly eat food if next head position is food</span></a>
<a class="sourceLine" id="cb6-12" title="12"><span class="ot">eatFood ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Game</span></a>
<a class="sourceLine" id="cb6-13" title="13"></a>
<a class="sourceLine" id="cb6-14" title="14"><span class="co">-- | Move snake along in a marquee fashion</span></a>
<a class="sourceLine" id="cb6-15" title="15"><span class="ot">move ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">Game</span></a>
<a class="sourceLine" id="cb6-16" title="16"></a>
<a class="sourceLine" id="cb6-17" title="17"><span class="co">-- | Turn game direction (only turns orthogonally)</span></a>
<a class="sourceLine" id="cb6-18" title="18"><span class="co">--</span></a>
<a class="sourceLine" id="cb6-19" title="19"><span class="co">-- Implicitly unpauses yet freezes game</span></a>
<a class="sourceLine" id="cb6-20" title="20"><span class="ot">turn ::</span> <span class="dt">Direction</span> <span class="ot">-&gt;</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">Game</span></a>
<a class="sourceLine" id="cb6-21" title="21"></a>
<a class="sourceLine" id="cb6-22" title="22"><span class="co">-- | Initialize a paused game with random food location</span></a>
<a class="sourceLine" id="cb6-23" title="23"><span class="ot">initGame ::</span> <span class="dt">IO</span> <span class="dt">Game</span></a></code></pre></div>
<h3 id="ui">UI</h3>
<p>To start, we need to determine what our <code>App s e n</code> type parameters are. This will completely describe the interface application and be passed to one of the library’s <code>main</code> style functions for execution. Note that <code>s</code> is the app state, <code>e</code> is an event type, and <code>n</code> is a resource name. The <code>e</code> is abstracted so that we can provide custom events. The <code>n</code> is usually a custom sum type called <code>Name</code> which allows us to <em>name</em> particular viewports. This is important so that we can keep track of where the user currently has <em>focus</em>, such as typing in one of two textboxes; however, for this simple snake game we don’t need to worry about that.</p>
<p>In simpler cases, the state <code>s</code> can directly coincide with a core datatype such as our <code>Snake.Game</code>. In many cases however, it will be necessary to wrap the core state within the ui state <code>s</code> to keep track of things that are interface specific (more on this later).</p>
<p>Let’s write out our app definition and leave some undefined functions:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></a>
<a class="sourceLine" id="cb7-2" title="2"><span class="kw">module</span> <span class="dt">UI</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb7-3" title="3"></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="kw">import</span> <span class="dt">Control.Monad</span> (forever, void)</a>
<a class="sourceLine" id="cb7-5" title="5"><span class="kw">import</span> <span class="dt">Control.Monad.IO.Class</span> (liftIO)</a>
<a class="sourceLine" id="cb7-6" title="6"><span class="kw">import</span> <span class="dt">Control.Concurrent</span> (threadDelay, forkIO)</a>
<a class="sourceLine" id="cb7-7" title="7"><span class="kw">import</span> <span class="dt">Data.Maybe</span> (fromMaybe)</a>
<a class="sourceLine" id="cb7-8" title="8"></a>
<a class="sourceLine" id="cb7-9" title="9"><span class="kw">import</span> <span class="dt">Snake</span></a>
<a class="sourceLine" id="cb7-10" title="10"></a>
<a class="sourceLine" id="cb7-11" title="11"><span class="kw">import</span> <span class="dt">Brick</span></a>
<a class="sourceLine" id="cb7-12" title="12">  ( <span class="dt">App</span>(<span class="op">..</span>), <span class="dt">AttrMap</span>, <span class="dt">BrickEvent</span>(<span class="op">..</span>), <span class="dt">EventM</span>, <span class="dt">Next</span>, <span class="dt">Widget</span></a>
<a class="sourceLine" id="cb7-13" title="13">  , customMain, neverShowCursor</a>
<a class="sourceLine" id="cb7-14" title="14">  , continue, halt</a>
<a class="sourceLine" id="cb7-15" title="15">  , hLimit, vLimit, vBox, hBox</a>
<a class="sourceLine" id="cb7-16" title="16">  , padRight, padLeft, padTop, padAll, <span class="dt">Padding</span>(<span class="op">..</span>)</a>
<a class="sourceLine" id="cb7-17" title="17">  , withBorderStyle</a>
<a class="sourceLine" id="cb7-18" title="18">  , str</a>
<a class="sourceLine" id="cb7-19" title="19">  , attrMap, withAttr, emptyWidget, <span class="dt">AttrName</span>, on, fg</a>
<a class="sourceLine" id="cb7-20" title="20">  , (<span class="op">&lt;+&gt;</span>)</a>
<a class="sourceLine" id="cb7-21" title="21">  )</a>
<a class="sourceLine" id="cb7-22" title="22"><span class="kw">import</span> <span class="dt">Brick.BChan</span> (newBChan, writeBChan)</a>
<a class="sourceLine" id="cb7-23" title="23"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Brick.Widgets.Border</span> <span class="kw">as</span> <span class="dt">B</span></a>
<a class="sourceLine" id="cb7-24" title="24"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Brick.Widgets.Border.Style</span> <span class="kw">as</span> <span class="dt">BS</span></a>
<a class="sourceLine" id="cb7-25" title="25"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Brick.Widgets.Center</span> <span class="kw">as</span> <span class="dt">C</span></a>
<a class="sourceLine" id="cb7-26" title="26"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Graphics.Vty</span> <span class="kw">as</span> <span class="dt">V</span></a>
<a class="sourceLine" id="cb7-27" title="27"><span class="kw">import</span> <span class="dt">Data.Sequence</span> (<span class="dt">Seq</span>)</a>
<a class="sourceLine" id="cb7-28" title="28"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Sequence</span> <span class="kw">as</span> <span class="dt">S</span></a>
<a class="sourceLine" id="cb7-29" title="29"><span class="kw">import</span> <span class="dt">Linear.V2</span> (<span class="dt">V2</span>(..))</a>
<a class="sourceLine" id="cb7-30" title="30"><span class="kw">import</span> <span class="dt">Lens.Micro</span> ((^.))</a>
<a class="sourceLine" id="cb7-31" title="31"></a>
<a class="sourceLine" id="cb7-32" title="32"><span class="co">-- Types</span></a>
<a class="sourceLine" id="cb7-33" title="33"></a>
<a class="sourceLine" id="cb7-34" title="34"><span class="co">-- | Ticks mark passing of time</span></a>
<a class="sourceLine" id="cb7-35" title="35"><span class="co">--</span></a>
<a class="sourceLine" id="cb7-36" title="36"><span class="co">-- This is our custom event that will be constantly fed into the app.</span></a>
<a class="sourceLine" id="cb7-37" title="37"><span class="kw">data</span> <span class="dt">Tick</span> <span class="ot">=</span> <span class="dt">Tick</span></a>
<a class="sourceLine" id="cb7-38" title="38"></a>
<a class="sourceLine" id="cb7-39" title="39"><span class="co">-- | Named resources</span></a>
<a class="sourceLine" id="cb7-40" title="40"><span class="co">--</span></a>
<a class="sourceLine" id="cb7-41" title="41"><span class="co">-- Not currently used, but will be easier to refactor</span></a>
<a class="sourceLine" id="cb7-42" title="42"><span class="co">-- if we call this &quot;Name&quot; now.</span></a>
<a class="sourceLine" id="cb7-43" title="43"><span class="kw">type</span> <span class="dt">Name</span> <span class="ot">=</span> ()</a>
<a class="sourceLine" id="cb7-44" title="44"></a>
<a class="sourceLine" id="cb7-45" title="45"><span class="kw">data</span> <span class="dt">Cell</span> <span class="ot">=</span> <span class="dt">Snake</span> <span class="op">|</span> <span class="dt">Food</span> <span class="op">|</span> <span class="dt">Empty</span></a>
<a class="sourceLine" id="cb7-46" title="46"></a>
<a class="sourceLine" id="cb7-47" title="47"><span class="co">-- App definition</span></a>
<a class="sourceLine" id="cb7-48" title="48"></a>
<a class="sourceLine" id="cb7-49" title="49"><span class="ot">app ::</span> <span class="dt">App</span> <span class="dt">Game</span> <span class="dt">Tick</span> <span class="dt">Name</span></a>
<a class="sourceLine" id="cb7-50" title="50">app <span class="ot">=</span> <span class="dt">App</span> { appDraw <span class="ot">=</span> drawUI</a>
<a class="sourceLine" id="cb7-51" title="51">          , appChooseCursor <span class="ot">=</span> neverShowCursor</a>
<a class="sourceLine" id="cb7-52" title="52">          , appHandleEvent <span class="ot">=</span> handleEvent</a>
<a class="sourceLine" id="cb7-53" title="53">          , appStartEvent <span class="ot">=</span> <span class="fu">return</span></a>
<a class="sourceLine" id="cb7-54" title="54">          , appAttrMap <span class="ot">=</span> <span class="fu">const</span> theMap</a>
<a class="sourceLine" id="cb7-55" title="55">          }</a>
<a class="sourceLine" id="cb7-56" title="56"></a>
<a class="sourceLine" id="cb7-57" title="57"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb7-58" title="58">main <span class="ot">=</span> <span class="fu">undefined</span></a>
<a class="sourceLine" id="cb7-59" title="59"></a>
<a class="sourceLine" id="cb7-60" title="60"><span class="co">-- Handling events</span></a>
<a class="sourceLine" id="cb7-61" title="61"></a>
<a class="sourceLine" id="cb7-62" title="62"><span class="ot">handleEvent ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">BrickEvent</span> <span class="dt">Name</span> <span class="dt">Tick</span> <span class="ot">-&gt;</span> <span class="dt">EventM</span> <span class="dt">Name</span> (<span class="dt">Next</span> <span class="dt">Game</span>)</a>
<a class="sourceLine" id="cb7-63" title="63">handleEvent <span class="ot">=</span> <span class="fu">undefined</span></a>
<a class="sourceLine" id="cb7-64" title="64"></a>
<a class="sourceLine" id="cb7-65" title="65"><span class="co">-- Drawing</span></a>
<a class="sourceLine" id="cb7-66" title="66"></a>
<a class="sourceLine" id="cb7-67" title="67"><span class="ot">drawUI ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> [<span class="dt">Widget</span> <span class="dt">Name</span>]</a>
<a class="sourceLine" id="cb7-68" title="68">drawUI <span class="ot">=</span> <span class="fu">undefined</span></a>
<a class="sourceLine" id="cb7-69" title="69"></a>
<a class="sourceLine" id="cb7-70" title="70"><span class="ot">theMap ::</span> <span class="dt">AttrMap</span></a>
<a class="sourceLine" id="cb7-71" title="71">theMap <span class="ot">=</span> <span class="fu">undefined</span></a></code></pre></div>
<h4 id="custom-events">Custom Events</h4>
<p>So far I’ve only used <code>brick</code> to make games which need to be redrawn as time passes, with or without user input. This requires using <code>Brick.customMain</code> with that <code>Tick</code> event type, and opening a forked process to <code>forever</code> feed that event type into the channel. Since this is a common scenario, there is a <code>Brick.BChan</code> module that makes this pretty quick:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb8-2" title="2">main <span class="ot">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-3" title="3">  chan <span class="ot">&lt;-</span> newBChan <span class="dv">10</span></a>
<a class="sourceLine" id="cb8-4" title="4">  forkIO <span class="op">$</span> forever <span class="op">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-5" title="5">    writeBChan chan <span class="dt">Tick</span></a>
<a class="sourceLine" id="cb8-6" title="6">    threadDelay <span class="dv">100000</span> <span class="co">-- decides how fast your game moves</span></a>
<a class="sourceLine" id="cb8-7" title="7">  g <span class="ot">&lt;-</span> initGame</a>
<a class="sourceLine" id="cb8-8" title="8">  void <span class="op">$</span> customMain (V.mkVty V.defaultConfig) (<span class="dt">Just</span> chan) app g</a></code></pre></div>
<p>We do need to import <code>Vty.Graphics</code> since <code>customMain</code> allows us to specify a custom <code>IO Vty.Graphics.Vty</code> handle, but we’re only customizing the existence of the event channel <code>BChan Tick</code>. The app is now bootstrapped, and all we need to do is implement <code>handleEvent</code>, <code>drawUI</code>, and <code>theMap</code> (handles styling).</p>
<h4 id="handling-events">Handling events</h4>
<p>Handling events is largely straightforward, and can be very clean when your underlying application logic is taken care of in a core module. All we do is essentially map events to the proper state modifiers.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="ot">handleEvent ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">BrickEvent</span> <span class="dt">Name</span> <span class="dt">Tick</span> <span class="ot">-&gt;</span> <span class="dt">EventM</span> <span class="dt">Name</span> (<span class="dt">Next</span> <span class="dt">Game</span>)</a>
<a class="sourceLine" id="cb9-2" title="2">handleEvent g (<span class="dt">AppEvent</span> <span class="dt">Tick</span>)                       <span class="ot">=</span> continue <span class="op">$</span> step g</a>
<a class="sourceLine" id="cb9-3" title="3">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> <span class="dt">V.KUp</span> []))         <span class="ot">=</span> continue <span class="op">$</span> turn <span class="dt">North</span> g</a>
<a class="sourceLine" id="cb9-4" title="4">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> <span class="dt">V.KDown</span> []))       <span class="ot">=</span> continue <span class="op">$</span> turn <span class="dt">South</span> g</a>
<a class="sourceLine" id="cb9-5" title="5">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> <span class="dt">V.KRight</span> []))      <span class="ot">=</span> continue <span class="op">$</span> turn <span class="dt">East</span> g</a>
<a class="sourceLine" id="cb9-6" title="6">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> <span class="dt">V.KLeft</span> []))       <span class="ot">=</span> continue <span class="op">$</span> turn <span class="dt">West</span> g</a>
<a class="sourceLine" id="cb9-7" title="7">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> (<span class="dt">V.KChar</span> <span class="ch">&#39;k&#39;</span>) [])) <span class="ot">=</span> continue <span class="op">$</span> turn <span class="dt">North</span> g</a>
<a class="sourceLine" id="cb9-8" title="8">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> (<span class="dt">V.KChar</span> <span class="ch">&#39;j&#39;</span>) [])) <span class="ot">=</span> continue <span class="op">$</span> turn <span class="dt">South</span> g</a>
<a class="sourceLine" id="cb9-9" title="9">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> (<span class="dt">V.KChar</span> <span class="ch">&#39;l&#39;</span>) [])) <span class="ot">=</span> continue <span class="op">$</span> turn <span class="dt">East</span> g</a>
<a class="sourceLine" id="cb9-10" title="10">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> (<span class="dt">V.KChar</span> <span class="ch">&#39;h&#39;</span>) [])) <span class="ot">=</span> continue <span class="op">$</span> turn <span class="dt">West</span> g</a>
<a class="sourceLine" id="cb9-11" title="11">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> (<span class="dt">V.KChar</span> <span class="ch">&#39;r&#39;</span>) [])) <span class="ot">=</span> liftIO (initGame) <span class="op">&gt;&gt;=</span> continue</a>
<a class="sourceLine" id="cb9-12" title="12">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> (<span class="dt">V.KChar</span> <span class="ch">&#39;q&#39;</span>) [])) <span class="ot">=</span> halt g</a>
<a class="sourceLine" id="cb9-13" title="13">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> <span class="dt">V.KEsc</span> []))        <span class="ot">=</span> halt g</a>
<a class="sourceLine" id="cb9-14" title="14">handleEvent g _                                     <span class="ot">=</span> continue g</a></code></pre></div>
<p>It’s probably obvious, but <code>continue</code> will continue execution with the supplied state value, which is then drawn. We can also <code>halt</code> to stop execution, which will essentially finish the evaluation of our <code>customMain</code> and result in <code>IO Game</code>, where the resulting game is the last value that we supplied to <code>halt</code>.</p>
<h4 id="drawing">Drawing</h4>
<p>Drawing is fairly simple as well but can require a good amount of code to position things how you want them. I like to break up the visual space into regions with drawing functions for each one.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1"><span class="ot">drawUI ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> [<span class="dt">Widget</span> <span class="dt">Name</span>]</a>
<a class="sourceLine" id="cb10-2" title="2">drawUI g <span class="ot">=</span></a>
<a class="sourceLine" id="cb10-3" title="3">  [ C.center <span class="op">$</span> padRight (<span class="dt">Pad</span> <span class="dv">2</span>) (drawStats g) <span class="op">&lt;+&gt;</span> drawGrid g ]</a>
<a class="sourceLine" id="cb10-4" title="4"></a>
<a class="sourceLine" id="cb10-5" title="5"><span class="ot">drawStats ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">Widget</span> <span class="dt">Name</span></a>
<a class="sourceLine" id="cb10-6" title="6">drawStats <span class="ot">=</span> <span class="fu">undefined</span></a>
<a class="sourceLine" id="cb10-7" title="7"></a>
<a class="sourceLine" id="cb10-8" title="8"><span class="ot">drawGrid ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">Widget</span> <span class="dt">Name</span></a>
<a class="sourceLine" id="cb10-9" title="9">drawGrid <span class="ot">=</span> <span class="fu">undefined</span></a></code></pre></div>
<p>This will center the overall interface (<code>C.center</code>), put the stats and grid widgets horizontally side by side (<code>&lt;+&gt;</code>), and separate them by a 2-character width (<code>padRight (Pad 2)</code>).</p>
<p>Let’s move forward with the stats column:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1"><span class="ot">drawStats ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">Widget</span> <span class="dt">Name</span></a>
<a class="sourceLine" id="cb11-2" title="2">drawStats g <span class="ot">=</span> hLimit <span class="dv">11</span></a>
<a class="sourceLine" id="cb11-3" title="3">  <span class="op">$</span> vBox [ drawScore (g <span class="op">^.</span> score)</a>
<a class="sourceLine" id="cb11-4" title="4">         , padTop (<span class="dt">Pad</span> <span class="dv">2</span>) <span class="op">$</span> drawGameOver (g <span class="op">^.</span> dead)</a>
<a class="sourceLine" id="cb11-5" title="5">         ]</a>
<a class="sourceLine" id="cb11-6" title="6"></a>
<a class="sourceLine" id="cb11-7" title="7"><span class="ot">drawScore ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Widget</span> <span class="dt">Name</span></a>
<a class="sourceLine" id="cb11-8" title="8">drawScore n <span class="ot">=</span> withBorderStyle BS.unicodeBold</a>
<a class="sourceLine" id="cb11-9" title="9">  <span class="op">$</span> B.borderWithLabel (str <span class="st">&quot;Score&quot;</span>)</a>
<a class="sourceLine" id="cb11-10" title="10">  <span class="op">$</span> C.hCenter</a>
<a class="sourceLine" id="cb11-11" title="11">  <span class="op">$</span> padAll <span class="dv">1</span></a>
<a class="sourceLine" id="cb11-12" title="12">  <span class="op">$</span> str <span class="op">$</span> <span class="fu">show</span> n</a>
<a class="sourceLine" id="cb11-13" title="13"></a>
<a class="sourceLine" id="cb11-14" title="14"><span class="ot">drawGameOver ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Widget</span> <span class="dt">Name</span></a>
<a class="sourceLine" id="cb11-15" title="15">drawGameOver dead <span class="ot">=</span></a>
<a class="sourceLine" id="cb11-16" title="16">  <span class="kw">if</span> dead</a>
<a class="sourceLine" id="cb11-17" title="17">     <span class="kw">then</span> withAttr gameOverAttr <span class="op">$</span> C.hCenter <span class="op">$</span> str <span class="st">&quot;GAME OVER&quot;</span></a>
<a class="sourceLine" id="cb11-18" title="18">     <span class="kw">else</span> emptyWidget</a>
<a class="sourceLine" id="cb11-19" title="19"></a>
<a class="sourceLine" id="cb11-20" title="20"><span class="ot">gameOverAttr ::</span> <span class="dt">AttrName</span></a>
<a class="sourceLine" id="cb11-21" title="21">gameOverAttr <span class="ot">=</span> <span class="st">&quot;gameOver&quot;</span></a></code></pre></div>
<p>I’m throwing in that <code>hLimit 11</code> to prevent the widget greediness caused by the outer <code>C.center</code>. I’m also using <code>vBox</code> to show some other options of aligning widgets; <code>vBox</code> and <code>hBox</code> align a list of widgets vertically and horizontally, respectfully. They can be thought of as folds over the binary <code>&lt;=&gt;</code> and <code>&lt;+&gt;</code> operations.</p>
<p>The score is straightforward, but it is the first border in this tutorial. Borders are well documented in the <a href="https://github.com/jtdaugherty/brick/blob/56133bb0c6352f2995c3a48995a7c35a1941bc1a/programs/BorderDemo.hs">border demo</a> and the Haddocks for that matter.</p>
<p>We also only show the “game over” widget if the game is actually over. In that case, we are rendering the string widget with the <code>gameOverAttr</code> attribute name. Attribute names are basically type safe <em>names</em> that we can assign to widgets to apply predetermined styles, similar to assigning a class name to a div in HTML and defining the CSS styles for that class elsewhere.</p>
<p>Attribute names implement <code>IsString</code>, so they are easy to construct with the <code>OverloadedStrings</code> pragma.</p>
<p>Now for the main event:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" title="1"><span class="ot">drawGrid ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">Widget</span> <span class="dt">Name</span></a>
<a class="sourceLine" id="cb12-2" title="2">drawGrid g <span class="ot">=</span> withBorderStyle BS.unicodeBold</a>
<a class="sourceLine" id="cb12-3" title="3">  <span class="op">$</span> B.borderWithLabel (str <span class="st">&quot;Snake&quot;</span>)</a>
<a class="sourceLine" id="cb12-4" title="4">  <span class="op">$</span> vBox rows</a>
<a class="sourceLine" id="cb12-5" title="5">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-6" title="6">    rows         <span class="ot">=</span> [hBox <span class="op">$</span> cellsInRow r <span class="op">|</span> r <span class="ot">&lt;-</span> [height<span class="op">-</span><span class="dv">1</span>,height<span class="op">-</span><span class="dv">2</span><span class="op">..</span><span class="dv">0</span>]]</a>
<a class="sourceLine" id="cb12-7" title="7">    cellsInRow y <span class="ot">=</span> [drawCoord (<span class="dt">V2</span> x y) <span class="op">|</span> x <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span>width<span class="op">-</span><span class="dv">1</span>]]</a>
<a class="sourceLine" id="cb12-8" title="8">    drawCoord    <span class="ot">=</span> drawCell <span class="op">.</span> cellAt</a>
<a class="sourceLine" id="cb12-9" title="9">    cellAt c</a>
<a class="sourceLine" id="cb12-10" title="10">      <span class="op">|</span> c <span class="ot">`elem`</span> g <span class="op">^.</span> snake <span class="ot">=</span> <span class="dt">Snake</span></a>
<a class="sourceLine" id="cb12-11" title="11">      <span class="op">|</span> c <span class="op">==</span> g <span class="op">^.</span> food      <span class="ot">=</span> <span class="dt">Food</span></a>
<a class="sourceLine" id="cb12-12" title="12">      <span class="op">|</span> <span class="fu">otherwise</span>           <span class="ot">=</span> <span class="dt">Empty</span></a>
<a class="sourceLine" id="cb12-13" title="13"></a>
<a class="sourceLine" id="cb12-14" title="14"><span class="ot">drawCell ::</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Widget</span> <span class="dt">Name</span></a>
<a class="sourceLine" id="cb12-15" title="15">drawCell <span class="dt">Snake</span> <span class="ot">=</span> withAttr snakeAttr cw</a>
<a class="sourceLine" id="cb12-16" title="16">drawCell <span class="dt">Food</span>  <span class="ot">=</span> withAttr foodAttr cw</a>
<a class="sourceLine" id="cb12-17" title="17">drawCell <span class="dt">Empty</span> <span class="ot">=</span> withAttr emptyAttr cw</a>
<a class="sourceLine" id="cb12-18" title="18"></a>
<a class="sourceLine" id="cb12-19" title="19"><span class="ot">cw ::</span> <span class="dt">Widget</span> <span class="dt">Name</span></a>
<a class="sourceLine" id="cb12-20" title="20">cw <span class="ot">=</span> str <span class="st">&quot;  &quot;</span></a>
<a class="sourceLine" id="cb12-21" title="21"></a>
<a class="sourceLine" id="cb12-22" title="22">snakeAttr, foodAttr,<span class="ot"> emptyAttr ::</span> <span class="dt">AttrName</span></a>
<a class="sourceLine" id="cb12-23" title="23">snakeAttr <span class="ot">=</span> <span class="st">&quot;snakeAttr&quot;</span></a>
<a class="sourceLine" id="cb12-24" title="24">foodAttr <span class="ot">=</span> <span class="st">&quot;foodAttr&quot;</span></a>
<a class="sourceLine" id="cb12-25" title="25">emptyAttr <span class="ot">=</span> <span class="st">&quot;emptyAttr&quot;</span></a></code></pre></div>
<p>There’s actually nothing new here! We’ve already covered all the <code>brick</code> functions necessary to draw the grid. My approach to grids is to render a square cell widget <code>cw</code> with different colors depending on the cell state. The easiest way to draw a colored square is to stick two characters side by side. If we assign an attribute with a matching foreground and background, then it doesn’t matter what the two characters are (provided that they aren’t some crazy Unicode characters that might render to an unexpected size). However, if we want empty cells to render with the same color as the user’s default background color, then spaces are a good choice.</p>
<p>Finally, we’ll define the attribute map:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1"><span class="ot">theMap ::</span> <span class="dt">AttrMap</span></a>
<a class="sourceLine" id="cb13-2" title="2">theMap <span class="ot">=</span> attrMap V.defAttr</a>
<a class="sourceLine" id="cb13-3" title="3">  [ (snakeAttr, V.blue <span class="ot">`on`</span> V.blue)</a>
<a class="sourceLine" id="cb13-4" title="4">  , (foodAttr, V.red <span class="ot">`on`</span> V.red)</a>
<a class="sourceLine" id="cb13-5" title="5">  , (gameOverAttr, fg V.red <span class="ot">`V.withStyle`</span> V.bold)</a>
<a class="sourceLine" id="cb13-6" title="6">  ]</a></code></pre></div>
<p>Again, styles aren’t terribly complicated, but it will be one area where you might have to look in the <a href="http://hackage.haskell.org/package/vty">vty</a> package (specifically <a href="http://hackage.haskell.org/package/vty-5.15.1/docs/Graphics-Vty-Attributes.html">Graphics.Vty.Attributes</a>) to find what you need.</p>
<p>Another thing to mention is that the attributes form a hierarchy and can be combined in a parent-child relationship via <code>mappend</code>. I haven’t actually used this feature, but it does sound quite handy. For a more detailed discussion see the <a href="https://hackage.haskell.org/package/brick-0.18/docs/Brick-AttrMap.html">Brick.AttrMap</a> haddocks.</p>
<h2 id="variable-speed">Variable speed</h2>
<p>One difficult problem I encountered was implementing a variable speed in the GoL. I could have just used the same approach above with the minimum thread delay (corresponding to the maximum speed) and counted <code>Tick</code> events, only issuing an actual <code>step</code> in the game when the modular count of <code>Tick</code>s reached an amount corresponding to the current game speed, but that’s kind of an ugly approach.</p>
<p>Instead, I reached out to the author and he advised me to use a <code>TVar</code> within the app state. I had never used <code>TVar</code>, but it’s pretty easy!</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" title="1"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb14-2" title="2">main <span class="ot">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-3" title="3">  chan <span class="ot">&lt;-</span> newBChan <span class="dv">10</span></a>
<a class="sourceLine" id="cb14-4" title="4">  tv   <span class="ot">&lt;-</span> atomically <span class="op">$</span> newTVar (spToInt initialSpeed)</a>
<a class="sourceLine" id="cb14-5" title="5">  forkIO <span class="op">$</span> forever <span class="op">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-6" title="6">    writeBChan chan <span class="dt">Tick</span></a>
<a class="sourceLine" id="cb14-7" title="7">    int <span class="ot">&lt;-</span> atomically <span class="op">$</span> readTVar tv</a>
<a class="sourceLine" id="cb14-8" title="8">    threadDelay int</a>
<a class="sourceLine" id="cb14-9" title="9">  customMain (V.mkVty V.defaultConfig) (<span class="dt">Just</span> chan) app (initialGame tv)</a>
<a class="sourceLine" id="cb14-10" title="10">    <span class="op">&gt;&gt;=</span> printResult</a></code></pre></div>
<p>The <code>tv &lt;- atomically $ newTVar (value :: a)</code> creates a new mutable reference to a value of type <code>a</code>, i.e. <code>TVar a</code>, and returns it in <code>IO</code>. In this case <code>value</code> is an <code>Int</code> which represents the delay between game steps. Then in the forked process, we read the delay from the <code>TVar</code> reference and use that to space out the calls to <code>writeBChan chan Tick</code>.</p>
<p>I store that same <code>tv :: TVar Int</code> in the brick app state, so that the user can change the speed:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" title="1"><span class="ot">handleEvent ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> <span class="dt">BrickEvent</span> <span class="dt">Name</span> <span class="dt">Tick</span> <span class="ot">-&gt;</span> <span class="dt">EventM</span> <span class="dt">Name</span> (<span class="dt">Next</span> <span class="dt">Game</span>)</a>
<a class="sourceLine" id="cb15-2" title="2">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> <span class="dt">V.KRight</span> [<span class="dt">V.MCtrl</span>])) <span class="ot">=</span> handleSpeed g (<span class="op">+</span>)</a>
<a class="sourceLine" id="cb15-3" title="3">handleEvent g (<span class="dt">VtyEvent</span> (<span class="dt">V.EvKey</span> <span class="dt">V.KLeft</span> [<span class="dt">V.MCtrl</span>]))  <span class="ot">=</span> handleSpeed g (<span class="op">-</span>)</a>
<a class="sourceLine" id="cb15-4" title="4"></a>
<a class="sourceLine" id="cb15-5" title="5"><span class="ot">handleSpeed ::</span> <span class="dt">Game</span> <span class="ot">-&gt;</span> (<span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">Float</span>) <span class="ot">-&gt;</span> <span class="dt">EventM</span> n (<span class="dt">Next</span> <span class="dt">Game</span>)</a>
<a class="sourceLine" id="cb15-6" title="6">handleSpeed g (<span class="op">+/-</span>) <span class="ot">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb15-7" title="7">  <span class="kw">let</span> newSp <span class="ot">=</span> validS <span class="op">$</span> (g <span class="op">^.</span> speed) <span class="op">+/-</span> speedInc</a>
<a class="sourceLine" id="cb15-8" title="8">  liftIO <span class="op">$</span> atomically <span class="op">$</span> writeTVar (g <span class="op">^.</span> interval) (spToInt newSp)</a>
<a class="sourceLine" id="cb15-9" title="9">  continue <span class="op">$</span> g <span class="op">&amp;</span> speed <span class="op">.~</span> newSp</a>
<a class="sourceLine" id="cb15-10" title="10"></a>
<a class="sourceLine" id="cb15-11" title="11"><span class="co">-- where</span></a>
<a class="sourceLine" id="cb15-12" title="12"></a>
<a class="sourceLine" id="cb15-13" title="13"><span class="co">-- | Speed increments = 0.01 gives 100 discrete speed settings</span></a>
<a class="sourceLine" id="cb15-14" title="14"><span class="ot">speedInc ::</span> <span class="dt">Float</span></a>
<a class="sourceLine" id="cb15-15" title="15">speedInc <span class="ot">=</span> <span class="fl">0.01</span></a>
<a class="sourceLine" id="cb15-16" title="16"></a>
<a class="sourceLine" id="cb15-17" title="17"><span class="co">-- | Game state</span></a>
<a class="sourceLine" id="cb15-18" title="18"><span class="kw">data</span> <span class="dt">Game</span> <span class="ot">=</span> <span class="dt">Game</span></a>
<a class="sourceLine" id="cb15-19" title="19">  {<span class="ot"> _board    ::</span> <span class="dt">Board</span> <span class="co">-- ^ Board state</span></a>
<a class="sourceLine" id="cb15-20" title="20">  ,<span class="ot"> _time     ::</span> <span class="dt">Int</span>   <span class="co">-- ^ Time elapsed</span></a>
<a class="sourceLine" id="cb15-21" title="21">  ,<span class="ot"> _paused   ::</span> <span class="dt">Bool</span>  <span class="co">-- ^ Playing vs. paused</span></a>
<a class="sourceLine" id="cb15-22" title="22">  ,<span class="ot"> _speed    ::</span> <span class="dt">Float</span> <span class="co">-- ^ Speed in [0..1]</span></a>
<a class="sourceLine" id="cb15-23" title="23">  ,<span class="ot"> _interval ::</span> <span class="dt">TVar</span> <span class="dt">Int</span> <span class="co">-- ^ Interval kept in TVar</span></a>
<a class="sourceLine" id="cb15-24" title="24">  ,<span class="ot"> _focus    ::</span> <span class="dt">F.FocusRing</span> <span class="dt">Name</span> <span class="co">-- ^ Keeps track of grid focus</span></a>
<a class="sourceLine" id="cb15-25" title="25">  ,<span class="ot"> _selected ::</span> <span class="dt">Cell</span> <span class="co">-- ^ Keeps track of cell focus</span></a>
<a class="sourceLine" id="cb15-26" title="26">  }</a></code></pre></div>
<h2 id="conclusion">Conclusion</h2>
<p><code>brick</code> let’s you build TUIs very quickly. I was able to write <code>snake</code> along with this tutorial within a few hours. More complicated interfaces can be tougher, but if you can successfully separate the interface and core functionality, you’ll have an easier time tacking on the frontend.</p>
<p>Lastly, let me remind you to look in the <a href="https://github.com/jtdaugherty/brick/tree/master/programs">demo programs</a> to figure stuff out, as <em>many</em> scenarios are covered throughout them.</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="https://hackage.haskell.org/package/brick-0.18">brick</a></li>
<li><a href="https://github.com/samtay/snake">snake</a></li>
<li><a href="https://github.com/samtay/tetris">tetris</a></li>
<li><a href="https://github.com/samtay/conway">conway</a></li>
</ul>
  <div id="disqus_thread"></div>
<script>

//  https://disqus.com/admin/universalcode/#configuration-variables
var disqus_config = function () {
  this.page.url = 'https://samtay.github.io/articles/brick.html';
  this.page.identifier = 'articles/brick.md';
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '//samtay.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
                            

</div>
]]></summary>
</entry>
<entry>
    <title>Who needs HashLife when you have comonads?</title>
    <link href="https://samtay.github.io//articles/comonadic-game-of-life.html" />
    <id>https://samtay.github.io//articles/comonadic-game-of-life.html</id>
    <published>2017-03-17T00:00:00Z</published>
    <updated>2017-03-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post">
  <h1 class="post-title">Who needs HashLife when you have comonads?</h1>
  <span class="post-date">March 17, 2017</span>
  <div id="toc"><ul>
<li><a href="#introduction">Introduction</a><ul>
<li><a href="#what-is-the-game-of-life">What is the Game of Life?</a></li>
<li><a href="#a-naive-implementation">A naive implementation</a></li>
</ul></li>
<li><a href="#comonads">Comonads</a><ul>
<li><a href="#definition">Definition</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#applying-to-the-game-of-life">Applying to the Game of Life</a></li>
</ul></li>
<li><a href="#performance">Performance</a><ul>
<li><a href="#initial">Initial</a></li>
<li><a href="#comonads-to-the-rescue">Comonads to the rescue</a></li>
<li><a href="#comparison">Comparison</a></li>
</ul></li>
<li><a href="#further-reading">Further reading</a></li>
</ul></div>
<h2 id="introduction">Introduction</h2>
<p>I’m going to talk a little bit about Conway’s Game of Life, comonads in practical use, and the performance improvement that they have to offer. If you already know what the GoL is, skip the introduction, and if you’re already familiar with comonads and how they are defined in Haskell, feel free to skip down to the performance section.</p>
<h3 id="what-is-the-game-of-life">What is the Game of Life?</h3>
<p>Conway’s <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Game of Life</a> is a cellular automaton of simple cells, each following simple rules, from which very complex behavior emerges under the right conditions. It is one of many examples of <a href="https://en.wikipedia.org/wiki/Complex_systems">complex systems</a>.</p>
<p>In a nutshell, there is a 2D grid of cells, each of which has two possible states: alive or dead. The grid evolves in discrete steps of time <code>t</code>. At time <code>t = 0</code>, we give the board some initial state. For all <code>t &gt; 0</code>, the grid evolves to step <code>t + 1</code> based on these simple rules:</p>
<ul>
<li>Any live cell with exactly two or three live neighbours stays alive.</li>
<li>Any dead cell with exactly three live neighbours becomes alive.</li>
<li>All other cells die.</li>
</ul>
<h3 id="a-naive-implementation">A naive implementation</h3>
<p>Yesterday I finished a little <a href="https://github.com/samtay/conway/tree/v0.0.0">terminal application</a> to play around with the GoL (link set to “initial” version before comonads). As you can guess from the rules above, the GoL is very easy to program; the difficulty is in programming it <em>efficiently</em>. One well known method of computing the game is known as HashLife, which is a pretty objectively complex technique. (Someone did this, or some of it, in Haskell <a href="http://dotat.at/prog/life/hslife.hs">here</a>.)</p>
<p>In my first pass at this, instead of creating a custom data structure directly I opted to leverage <a href="http://hackage.haskell.org/package/grid">grid</a> which is a really cool library that is useful for exploring mathematical grids/graphs/lattices:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">import</span> <span class="dt">Math.Geometry.Grid</span> (<span class="dt">Index</span>)</a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">import</span> <span class="dt">Math.Geometry.Grid.Octagonal</span> (<span class="dt">TorOctGrid</span>)</a>
<a class="sourceLine" id="cb1-3" title="3"><span class="kw">import</span> <span class="dt">Math.Geometry.GridMap.Lazy</span> (<span class="dt">LGridMap</span>)</a>
<a class="sourceLine" id="cb1-4" title="4"></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="kw">data</span> <span class="dt">St</span> <span class="ot">=</span> <span class="dt">Alive</span> <span class="op">|</span> <span class="dt">Dead</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">type</span> <span class="dt">Board</span> <span class="ot">=</span> <span class="dt">LGridMap</span> <span class="dt">TorOctGrid</span> <span class="dt">St</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="kw">type</span> <span class="dt">Cell</span> <span class="ot">=</span> <span class="dt">Index</span> <span class="dt">Board</span></a></code></pre></div>
<p>It was nice to do this first because I got <strong>a lot</strong> for free. Essentially my board looks like a mapping of <code>(x,y)</code> coordinates to cell states. In fact, the <code>toList</code> function that we get from the <code>Grid</code> typeclass confirms this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1">λ<span class="op">&gt;</span> toList <span class="op">$</span> blinker <span class="dv">3</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb2-2" title="2">[((<span class="dv">0</span>,<span class="dv">0</span>),<span class="dt">Dead</span>),((<span class="dv">0</span>,<span class="dv">1</span>),<span class="dt">Alive</span>),((<span class="dv">0</span>,<span class="dv">2</span>),<span class="dt">Dead</span>),((<span class="dv">1</span>,<span class="dv">0</span>),<span class="dt">Dead</span>),((<span class="dv">1</span>,<span class="dv">1</span>),<span class="dt">Alive</span>),((<span class="dv">1</span>,<span class="dv">2</span>),<span class="dt">Dead</span>),((<span class="dv">2</span>,<span class="dv">0</span>),<span class="dt">Dead</span>),((<span class="dv">2</span>,<span class="dv">1</span>),<span class="dt">Alive</span>),((<span class="dv">2</span>,<span class="dv">2</span>),<span class="dt">Dead</span>)]</a></code></pre></div>
<p>I even get a <code>neighbours</code> function that returns all 8 neighbours of a cell along with many more useful functions, so implementing game evolution was very straightforward:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="ot">step ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Board</span></a>
<a class="sourceLine" id="cb3-2" title="2">step b <span class="ot">=</span> GM.mapWithKey rule b</a>
<a class="sourceLine" id="cb3-3" title="3">  <span class="kw">where</span><span class="ot"> rule ::</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">St</span> <span class="ot">-&gt;</span> <span class="dt">St</span></a>
<a class="sourceLine" id="cb3-4" title="4">        rule c <span class="dt">Dead</span></a>
<a class="sourceLine" id="cb3-5" title="5">          <span class="op">|</span> liveNeighbors c <span class="op">==</span> <span class="dv">3</span> <span class="ot">=</span> <span class="dt">Alive</span></a>
<a class="sourceLine" id="cb3-6" title="6">          <span class="op">|</span> <span class="fu">otherwise</span>            <span class="ot">=</span> <span class="dt">Dead</span></a>
<a class="sourceLine" id="cb3-7" title="7">        rule c <span class="dt">Alive</span></a>
<a class="sourceLine" id="cb3-8" title="8">          <span class="op">|</span> liveNeighbors c <span class="op">==</span> <span class="dv">2</span> <span class="ot">=</span> <span class="dt">Alive</span></a>
<a class="sourceLine" id="cb3-9" title="9">          <span class="op">|</span> liveNeighbors c <span class="op">==</span> <span class="dv">3</span> <span class="ot">=</span> <span class="dt">Alive</span></a>
<a class="sourceLine" id="cb3-10" title="10">          <span class="op">|</span> <span class="fu">otherwise</span>            <span class="ot">=</span> <span class="dt">Dead</span></a>
<a class="sourceLine" id="cb3-11" title="11"></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="ot">        liveNeighbors ::</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-13" title="13">        liveNeighbors c <span class="ot">=</span> population <span class="op">$</span></a>
<a class="sourceLine" id="cb3-14" title="14">          GM.filterWithKey (<span class="fu">const</span> <span class="op">.</span> (<span class="ot">`elem`</span> neighbours b c)) <span class="op">$</span> b</a>
<a class="sourceLine" id="cb3-15" title="15"></a>
<a class="sourceLine" id="cb3-16" title="16"><span class="ot">population ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-17" title="17">population <span class="ot">=</span> <span class="fu">length</span> <span class="op">.</span> <span class="fu">filter</span> (<span class="op">==</span><span class="dt">Alive</span>) <span class="op">.</span> GM.elems</a></code></pre></div>
<p>Furthermore, using the toroidal style of grid allows modular boundaries which is how I wanted to implement this version.</p>
<p>So, you can see I was able to speed through the actual GoL logic since most of the tedious legwork was done in the grid package. My real challenge and where I spent the most effort was in the frontend, rendering and handling user interaction from a terminal. I chose to use <a href="http://hackage.haskell.org/package/brick">brick</a> which is a <em>fantastic</em> package that provides a high level declarative API to develop terminal interface applications along with a number of useful widgets - not to mention 17 awesome demo programs, great documentation, and a responsive google group. If you’re curious, <a href="https://github.com/samtay/conway/blob/v0.0.0/app/Main.hs">this</a> is how I rendered the above implementation using the brick library. But, this post is not about brick. Maybe that will come in the future.</p>
<h2 id="comonads">Comonads</h2>
<p>Like any good Haskeller I’d like to leverage whatever abstractions I can to improve the elegance and performance of this codebase. As it turns out, cellular automata are well represented by comonads.</p>
<h3 id="definition">Definition</h3>
<p>Let’s consider what the <em>dual</em> of the <code>Monad</code> type looks like:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="co">-- Monad definition (adapted)</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="kw">class</span> <span class="dt">Functor</span> <span class="ot">=&gt;</span> <span class="dt">Monad</span> m <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="ot">  return ::</span> a <span class="ot">-&gt;</span> m a</a>
<a class="sourceLine" id="cb4-4" title="4"><span class="ot">  join   ::</span> m (m a) <span class="ot">-&gt;</span> m a</a>
<a class="sourceLine" id="cb4-5" title="5"><span class="ot">  bind   ::</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> (m a <span class="ot">-&gt;</span> m b)</a>
<a class="sourceLine" id="cb4-6" title="6"></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="co">-- Comonad definition</span></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="co">-- Minimum defintion: extract, (duplicate | extend)</span></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="kw">class</span> <span class="dt">Functor</span> <span class="ot">=&gt;</span> <span class="dt">Comonad</span> m <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="ot">  extract   ::</span> m a <span class="ot">-&gt;</span> a       <span class="co">-- aka co-return</span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="ot">  duplicate ::</span> m a <span class="ot">-&gt;</span> m (m a) <span class="co">-- aka co-join</span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="ot">  extend    ::</span> (m b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (m b <span class="ot">-&gt;</span> m a) <span class="co">-- aka co-bind</span></a></code></pre></div>
<p>As anyone else on the internet would say, the <em>dual</em> of something is when its “arrows are flipped around”, which at first sounds like handwavey nonsense. Head <a href="http://blog.ezyang.com/2012/10/duality-for-haskellers/">here</a> for an excellent explanation of duality and how it applies to types in Haskell. I don’t want to get lost in the forest or duplicate content on the internet, so click that link or be satisfied with the fact that the arrows are literally flipped in the type signatures above.</p>
<p>I don’t want to get bogged down in category theory land - if you want to go down that path, see my <a href="#further-reading">resources</a>. Instead, let’s just build up intuition with some examples.</p>
<h3 id="examples">Examples</h3>
<p>The intuition we are trying to garner is that while monads <em>produce</em> effectful computations, comonads are <em>consumed</em> in context-sensitive computations. They usually come in handy when there is some large data structure that is composed of small, similar computations. Sound familiar?</p>
<h4 id="stream">Stream</h4>
<p>This is probably the simplest example, almost canonical to comonads:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">data</span> <span class="dt">Stream</span> a <span class="ot">=</span> <span class="dt">Cons</span> a (<span class="dt">Stream</span> a)</a>
<a class="sourceLine" id="cb5-2" title="2"></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Stream</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-4" title="4">  <span class="fu">fmap</span> f (<span class="dt">Cons</span> x xs) <span class="ot">=</span> <span class="dt">Cons</span> (f x) (<span class="fu">fmap</span> f xs)</a>
<a class="sourceLine" id="cb5-5" title="5"></a>
<a class="sourceLine" id="cb5-6" title="6"><span class="kw">instance</span> <span class="dt">Comonad</span> <span class="dt">Stream</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="ot">  extract ::</span> <span class="dt">Stream</span> a <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb5-8" title="8">  extract (<span class="dt">Cons</span> x _) <span class="ot">=</span> x</a>
<a class="sourceLine" id="cb5-9" title="9"></a>
<a class="sourceLine" id="cb5-10" title="10"><span class="ot">  duplicate ::</span> <span class="dt">Stream</span> a <span class="ot">-&gt;</span> <span class="dt">Stream</span> (<span class="dt">Stream</span> a)</a>
<a class="sourceLine" id="cb5-11" title="11">  duplicate s<span class="op">@</span>(<span class="dt">Cons</span> _ xs) <span class="ot">=</span> <span class="dt">Cons</span> s (duplicate xs)</a>
<a class="sourceLine" id="cb5-12" title="12"></a>
<a class="sourceLine" id="cb5-13" title="13"><span class="ot">  extend ::</span> (<span class="dt">Stream</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Stream</span> a <span class="ot">-&gt;</span> <span class="dt">Stream</span> b</a>
<a class="sourceLine" id="cb5-14" title="14">  extend f s<span class="op">@</span>(<span class="dt">Cons</span> _ xs) <span class="ot">=</span> <span class="dt">Cons</span> (f s) (extend f xs)</a></code></pre></div>
<p>So <code>extract</code> is like <code>head</code> and <code>duplicate</code> is like <code>tails</code>. <code>extend</code> on the other hand looks a little <code>fmap</code>-y:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="fu">fmap</span><span class="ot">   ::</span> (       a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Stream</span> a <span class="ot">-&gt;</span> <span class="dt">Stream</span> b</a>
<a class="sourceLine" id="cb6-2" title="2"><span class="ot">extend ::</span> (<span class="dt">Stream</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Stream</span> a <span class="ot">-&gt;</span> <span class="dt">Stream</span> b</a></code></pre></div>
<p>Well, it’s sort of similar to <code>fmap</code> but the type signature is slightly different in that the function argument <code>f :: Stream a -&gt; b</code> accepts its first argument already of type <code>Stream a</code>. Consequently, <code>f</code> can <em>know</em> or be <em>context-aware</em> of the comonadic structure when it produces its return value of type <code>b</code>. This is where the power of comonad really shines. In this case, the context that <code>f</code> is aware of at <em>each</em> function call when mapping over the stream is a current element <code>x</code> (we’ll say at the current “cursor”) along with the whole tail of the list from <code>x</code> onwards.</p>
<p>This observation lends itself to the intuition we set out to build, namely that monads <em>produce</em> additional context while comonads are <em>consumed</em> within a context.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="ot">bind   ::</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m a <span class="ot">-&gt;</span> m b</a>
<a class="sourceLine" id="cb7-2" title="2"><span class="ot">extend ::</span> (m a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> m a <span class="ot">-&gt;</span> m b</a></code></pre></div>
<p>Note that <code>bind</code> accepts a function <code>g :: a -&gt; m b</code> that takes an <code>a</code> value and <em>produces</em> a contextual value <code>m b</code>. Contrast this with <code>extend</code> accepting a function <code>f :: m a -&gt; b</code> which has <code>f</code> <em>consuming</em> the contextual value <code>m a</code>.</p>
<h4 id="zipper">Zipper</h4>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="co">-- (elems to the left) (cursor) (elems to the right)</span></a>
<a class="sourceLine" id="cb8-2" title="2"><span class="kw">data</span> <span class="dt">Zipper</span> a <span class="ot">=</span> <span class="dt">Zipper</span> [a] a [a]</a>
<a class="sourceLine" id="cb8-3" title="3"></a>
<a class="sourceLine" id="cb8-4" title="4"><span class="co">-- moving the cursor (not changing any values, per se)</span></a>
<a class="sourceLine" id="cb8-5" title="5">left,<span class="ot"> right ::</span> <span class="dt">Zipper</span> a <span class="ot">-&gt;</span> <span class="dt">Zipper</span> a</a>
<a class="sourceLine" id="cb8-6" title="6">left  (<span class="dt">Zipper</span> (l<span class="op">:</span>ls) x rs) <span class="ot">=</span> <span class="dt">Zipper</span> ls l (x<span class="op">:</span>rs)</a>
<a class="sourceLine" id="cb8-7" title="7">right (<span class="dt">Zipper</span> ls x (r<span class="op">:</span>rs)) <span class="ot">=</span> <span class="dt">Zipper</span> (x<span class="op">:</span>ls) r rs</a>
<a class="sourceLine" id="cb8-8" title="8"></a>
<a class="sourceLine" id="cb8-9" title="9"><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Zipper</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-10" title="10">  <span class="fu">fmap</span> f (<span class="dt">Zipper</span> l x r) <span class="ot">=</span> <span class="dt">Zipper</span> (<span class="fu">fmap</span> f l) (f x) (<span class="fu">fmap</span> f r)</a>
<a class="sourceLine" id="cb8-11" title="11"></a>
<a class="sourceLine" id="cb8-12" title="12"><span class="kw">instance</span> <span class="dt">Comonad</span> <span class="dt">Zipper</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-13" title="13">  extract (<span class="dt">Zipper</span> _ x _) <span class="ot">=</span> x</a>
<a class="sourceLine" id="cb8-14" title="14">  duplicate z <span class="ot">=</span> <span class="dt">Zipper</span> (iterate&#39; left z) z (iterate&#39; right z)</a>
<a class="sourceLine" id="cb8-15" title="15">    <span class="kw">where</span> iterate&#39; f <span class="ot">=</span> <span class="fu">drop</span> <span class="dv">1</span> <span class="op">.</span> <span class="fu">iterate</span> f</a></code></pre></div>
<p>Here’s what this looks like in practice:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1">λ<span class="op">&gt;</span> <span class="kw">let</span> z <span class="ot">=</span> <span class="dt">Zipper</span> [(<span class="op">-</span><span class="dv">1</span>),(<span class="op">-</span><span class="dv">2</span>)<span class="op">..</span>] <span class="dv">0</span> [<span class="dv">1</span><span class="op">..</span>]</a>
<a class="sourceLine" id="cb9-2" title="2">λ<span class="op">&gt;</span> <span class="kw">let</span> take&#39; n (<span class="dt">Zipper</span> l x r) <span class="ot">=</span> (<span class="dt">Zipper</span> (<span class="fu">take</span> n l) x (<span class="fu">take</span> n r))</a>
<a class="sourceLine" id="cb9-3" title="3">λ<span class="op">&gt;</span> take&#39; <span class="dv">5</span> z</a>
<a class="sourceLine" id="cb9-4" title="4"><span class="dt">Zipper</span> [<span class="op">-</span><span class="dv">1</span>,<span class="op">-</span><span class="dv">2</span>,<span class="op">-</span><span class="dv">3</span>,<span class="op">-</span><span class="dv">4</span>,<span class="op">-</span><span class="dv">5</span>] <span class="dv">0</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>]</a>
<a class="sourceLine" id="cb9-5" title="5"></a>
<a class="sourceLine" id="cb9-6" title="6"><span class="co">-- duplicate</span></a>
<a class="sourceLine" id="cb9-7" title="7">λ<span class="op">&gt;</span> take&#39; <span class="dv">5</span> <span class="op">$</span> <span class="fu">fmap</span> (take&#39; <span class="dv">5</span>) <span class="op">$</span> duplicate <span class="op">$</span> z</a>
<a class="sourceLine" id="cb9-8" title="8"><span class="dt">Zipper</span></a>
<a class="sourceLine" id="cb9-9" title="9">  [ <span class="dt">Zipper</span> [<span class="op">-</span><span class="dv">2</span>,<span class="op">-</span><span class="dv">3</span>,<span class="op">-</span><span class="dv">4</span>,<span class="op">-</span><span class="dv">5</span>,<span class="op">-</span><span class="dv">6</span>] (<span class="op">-</span><span class="dv">1</span>) [<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]</a>
<a class="sourceLine" id="cb9-10" title="10">  , <span class="dt">Zipper</span> [<span class="op">-</span><span class="dv">3</span>,<span class="op">-</span><span class="dv">4</span>,<span class="op">-</span><span class="dv">5</span>,<span class="op">-</span><span class="dv">6</span>,<span class="op">-</span><span class="dv">7</span>] (<span class="op">-</span><span class="dv">2</span>) [<span class="op">-</span><span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</a>
<a class="sourceLine" id="cb9-11" title="11">  , <span class="dt">Zipper</span> [<span class="op">-</span><span class="dv">4</span>,<span class="op">-</span><span class="dv">5</span>,<span class="op">-</span><span class="dv">6</span>,<span class="op">-</span><span class="dv">7</span>,<span class="op">-</span><span class="dv">8</span>] (<span class="op">-</span><span class="dv">3</span>) [<span class="op">-</span><span class="dv">2</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>]</a>
<a class="sourceLine" id="cb9-12" title="12">  , <span class="dt">Zipper</span> [<span class="op">-</span><span class="dv">5</span>,<span class="op">-</span><span class="dv">6</span>,<span class="op">-</span><span class="dv">7</span>,<span class="op">-</span><span class="dv">8</span>,<span class="op">-</span><span class="dv">9</span>] (<span class="op">-</span><span class="dv">4</span>) [<span class="op">-</span><span class="dv">3</span>,<span class="op">-</span><span class="dv">2</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">0</span>,<span class="dv">1</span>]</a>
<a class="sourceLine" id="cb9-13" title="13">  ,<span class="dt">Zipper</span> [<span class="op">-</span><span class="dv">6</span>,<span class="op">-</span><span class="dv">7</span>,<span class="op">-</span><span class="dv">8</span>,<span class="op">-</span><span class="dv">9</span>,<span class="op">-</span><span class="dv">10</span>] (<span class="op">-</span><span class="dv">5</span>) [<span class="op">-</span><span class="dv">4</span>,<span class="op">-</span><span class="dv">3</span>,<span class="op">-</span><span class="dv">2</span>,<span class="op">-</span><span class="dv">1</span>,<span class="dv">0</span>]</a>
<a class="sourceLine" id="cb9-14" title="14">  ]</a>
<a class="sourceLine" id="cb9-15" title="15">  (<span class="dt">Zipper</span> [<span class="op">-</span><span class="dv">1</span>,<span class="op">-</span><span class="dv">2</span>,<span class="op">-</span><span class="dv">3</span>,<span class="op">-</span><span class="dv">4</span>,<span class="op">-</span><span class="dv">5</span>] <span class="dv">0</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>])</a>
<a class="sourceLine" id="cb9-16" title="16">  [ <span class="dt">Zipper</span> [<span class="dv">0</span>,<span class="op">-</span><span class="dv">1</span>,<span class="op">-</span><span class="dv">2</span>,<span class="op">-</span><span class="dv">3</span>,<span class="op">-</span><span class="dv">4</span>] <span class="dv">1</span> [<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>]</a>
<a class="sourceLine" id="cb9-17" title="17">  , <span class="dt">Zipper</span> [<span class="dv">1</span>,<span class="dv">0</span>,<span class="op">-</span><span class="dv">1</span>,<span class="op">-</span><span class="dv">2</span>,<span class="op">-</span><span class="dv">3</span>] <span class="dv">2</span> [<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>]</a>
<a class="sourceLine" id="cb9-18" title="18">  , <span class="dt">Zipper</span> [<span class="dv">2</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="op">-</span><span class="dv">1</span>,<span class="op">-</span><span class="dv">2</span>] <span class="dv">3</span> [<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>]</a>
<a class="sourceLine" id="cb9-19" title="19">  , <span class="dt">Zipper</span> [<span class="dv">3</span>,<span class="dv">2</span>,<span class="dv">1</span>,<span class="dv">0</span>,<span class="op">-</span><span class="dv">1</span>] <span class="dv">4</span> [<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]</a>
<a class="sourceLine" id="cb9-20" title="20">  , <span class="dt">Zipper</span> [<span class="dv">4</span>,<span class="dv">3</span>,<span class="dv">2</span>,<span class="dv">1</span>,<span class="dv">0</span>] <span class="dv">5</span> [<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">10</span>]</a>
<a class="sourceLine" id="cb9-21" title="21">  ]</a>
<a class="sourceLine" id="cb9-22" title="22"></a>
<a class="sourceLine" id="cb9-23" title="23"><span class="co">-- extend . extract</span></a>
<a class="sourceLine" id="cb9-24" title="24">λ<span class="op">&gt;</span> take&#39; <span class="dv">5</span> <span class="op">$</span> extend extract z</a>
<a class="sourceLine" id="cb9-25" title="25"><span class="dt">Zipper</span> [<span class="op">-</span><span class="dv">1</span>,<span class="op">-</span><span class="dv">2</span>,<span class="op">-</span><span class="dv">3</span>,<span class="op">-</span><span class="dv">4</span>,<span class="op">-</span><span class="dv">5</span>] <span class="dv">0</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>] <span class="co">-- this makes sense, also is a law!</span></a>
<a class="sourceLine" id="cb9-26" title="26"></a>
<a class="sourceLine" id="cb9-27" title="27"><span class="co">-- extend (without leveraging context)</span></a>
<a class="sourceLine" id="cb9-28" title="28">λ<span class="op">&gt;</span> take&#39; <span class="dv">5</span> <span class="op">$</span> extend (\(<span class="dt">Zipper</span> _ x _) <span class="ot">-&gt;</span> <span class="dv">2</span> <span class="op">*</span> x) z</a>
<a class="sourceLine" id="cb9-29" title="29"><span class="dt">Zipper</span> [<span class="op">-</span><span class="dv">2</span>,<span class="op">-</span><span class="dv">4</span>,<span class="op">-</span><span class="dv">6</span>,<span class="op">-</span><span class="dv">8</span>,<span class="op">-</span><span class="dv">10</span>] <span class="dv">0</span> [<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>]</a>
<a class="sourceLine" id="cb9-30" title="30"></a>
<a class="sourceLine" id="cb9-31" title="31"><span class="co">-- extend (looking to the immediate left and right)</span></a>
<a class="sourceLine" id="cb9-32" title="32">λ<span class="op">&gt;</span> take&#39; <span class="dv">5</span> <span class="op">$</span> extend (\(<span class="dt">Zipper</span> (l<span class="op">:</span>_) x (r<span class="op">:</span>_)) <span class="ot">-&gt;</span> l <span class="op">+</span> <span class="dv">2</span> <span class="op">*</span> x <span class="op">+</span> r) z</a>
<a class="sourceLine" id="cb9-33" title="33"><span class="dt">Zipper</span> [<span class="op">-</span><span class="dv">4</span>,<span class="op">-</span><span class="dv">8</span>,<span class="op">-</span><span class="dv">12</span>,<span class="op">-</span><span class="dv">16</span>,<span class="op">-</span><span class="dv">20</span>] <span class="dv">0</span> [<span class="dv">4</span>,<span class="dv">8</span>,<span class="dv">12</span>,<span class="dv">16</span>,<span class="dv">20</span>]</a>
<a class="sourceLine" id="cb9-34" title="34">λ<span class="op">&gt;</span> take&#39; <span class="dv">5</span> <span class="op">$</span> extend (\(<span class="dt">Zipper</span> (l<span class="op">:</span>_) x (r<span class="op">:</span>_)) <span class="ot">-&gt;</span> intercalate <span class="st">&quot;,&quot;</span> <span class="op">.</span> <span class="fu">map</span> <span class="fu">show</span> <span class="op">$</span> [l,x,r]) z</a>
<a class="sourceLine" id="cb9-35" title="35"><span class="dt">Zipper</span></a>
<a class="sourceLine" id="cb9-36" title="36">  [<span class="st">&quot;-2,-1,0&quot;</span>,<span class="st">&quot;-3,-2,-1&quot;</span>,<span class="st">&quot;-4,-3,-2&quot;</span>,<span class="st">&quot;-5,-4,-3&quot;</span>,<span class="st">&quot;-6,-5,-4&quot;</span>]</a>
<a class="sourceLine" id="cb9-37" title="37">  <span class="st">&quot;-1,0,1&quot;</span></a>
<a class="sourceLine" id="cb9-38" title="38">  [<span class="st">&quot;0,1,2&quot;</span>,<span class="st">&quot;1,2,3&quot;</span>,<span class="st">&quot;2,3,4&quot;</span>,<span class="st">&quot;3,4,5&quot;</span>,<span class="st">&quot;4,5,6&quot;</span>]</a></code></pre></div>
<p>Hopefully these examples show how comonads are a very fitting solution to computing cellular autamata. Again, refer to <a href="#further-reading">resources</a> if you are unsatisfied, as there’s plenty of content to read up on.</p>
<h3 id="applying-to-the-game-of-life">Applying to the Game of Life</h3>
<p>I want to change as little as possible from my current implementation - ideally just swap out the data structure and change very little in my frontend and test suite. I hit this mark fairly well, as my commit updating the executable only diffs by +15/-17.</p>
<p>My implementation is similar to my sources, but unique in the toroidal aspect. My base 1-dimensional zipper is defined as</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Sequence</span> <span class="kw">as</span> <span class="dt">S</span></a>
<a class="sourceLine" id="cb10-2" title="2"></a>
<a class="sourceLine" id="cb10-3" title="3"><span class="co">-- | One dimensional finite list with cursor context</span></a>
<a class="sourceLine" id="cb10-4" title="4"><span class="co">--</span></a>
<a class="sourceLine" id="cb10-5" title="5"><span class="co">-- The first element of the sequence at &#39;_zl&#39; can be thought of as</span></a>
<a class="sourceLine" id="cb10-6" title="6"><span class="co">-- /to the left/ of the cursor, while the last element is</span></a>
<a class="sourceLine" id="cb10-7" title="7"><span class="co">-- /to the right/ of the cursor.</span></a>
<a class="sourceLine" id="cb10-8" title="8"><span class="co">-- The cursor value and index are &#39;_zc&#39; and &#39;_zi&#39; respectively.</span></a>
<a class="sourceLine" id="cb10-9" title="9"><span class="co">-- This can be thought of as a circle.</span></a>
<a class="sourceLine" id="cb10-10" title="10"><span class="co">-- Warning: must have length greater than zero!</span></a>
<a class="sourceLine" id="cb10-11" title="11"><span class="kw">data</span> <span class="dt">Z</span> a <span class="ot">=</span> <span class="dt">Z</span> {<span class="ot"> _zl ::</span> <span class="dt">S.Seq</span> a</a>
<a class="sourceLine" id="cb10-12" title="12">             ,<span class="ot"> _zc ::</span> a</a>
<a class="sourceLine" id="cb10-13" title="13">             ,<span class="ot"> _zi ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb10-14" title="14">             } <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</a></code></pre></div>
<p>So “shifting left” will focus the first element of <code>_zl</code> and snoc <code>_zc</code> to <code>_zl</code>, while “shifting right” will focus the last element of <code>_zl</code> and cons <code>_zc</code> to <code>_zl</code>. I chose <code>Data.Sequence</code> because it has a nice API and is symmetric in time complexities when viewing either end of the sequence.</p>
<p>So the Game of Life is then implemented as a nested <code>Z (Z a)</code>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1"><span class="co">-- | A modular game of life board</span></a>
<a class="sourceLine" id="cb11-2" title="2"><span class="co">--</span></a>
<a class="sourceLine" id="cb11-3" title="3"><span class="co">-- With this interpretation, for a board of size @n x n@</span></a>
<a class="sourceLine" id="cb11-4" title="4"><span class="co">-- the @(n + 1)@th column/row is the same as the boundary</span></a>
<a class="sourceLine" id="cb11-5" title="5"><span class="co">-- at the @1@st column/row.</span></a>
<a class="sourceLine" id="cb11-6" title="6"><span class="kw">type</span> <span class="dt">Board</span> <span class="ot">=</span> <span class="dt">ZZ</span> <span class="dt">St</span></a>
<a class="sourceLine" id="cb11-7" title="7"></a>
<a class="sourceLine" id="cb11-8" title="8"><span class="co">-- | Indexer for the &#39;Board&#39;</span></a>
<a class="sourceLine" id="cb11-9" title="9"><span class="kw">type</span> <span class="dt">Cell</span> <span class="ot">=</span> (<span class="dt">Int</span>, <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb11-10" title="10"></a>
<a class="sourceLine" id="cb11-11" title="11"><span class="co">-- | Possible cell states</span></a>
<a class="sourceLine" id="cb11-12" title="12"><span class="kw">data</span> <span class="dt">St</span> <span class="ot">=</span> <span class="dt">Alive</span> <span class="op">|</span> <span class="dt">Dead</span></a>
<a class="sourceLine" id="cb11-13" title="13">  <span class="kw">deriving</span> (<span class="dt">Eq</span>)</a>
<a class="sourceLine" id="cb11-14" title="14"></a>
<a class="sourceLine" id="cb11-15" title="15"><span class="kw">newtype</span> <span class="dt">ZZ</span> a <span class="ot">=</span> <span class="dt">ZZ</span> {<span class="ot"> _unzz ::</span> <span class="dt">Z</span> (<span class="dt">Z</span> a) }</a>
<a class="sourceLine" id="cb11-16" title="16">  <span class="kw">deriving</span> (<span class="dt">Eq</span>)</a></code></pre></div>
<p>You might be wondering where that <code>Cell</code> indexer comes into play. I ended up creating a <code>Zipper</code> class, which was a nice pattern because once <code>Z</code> had a <code>Zipper</code> instance, I could easily polymorphically use those class functions when writing the instance for the newtype <code>ZZ</code>. The class is larger than it needs to be, as I’m not even currently using all of its methods, but I think it is fairly future proof if I want to add more features to the app:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" title="1"><span class="co">-- | Class for a modular bounded container</span></a>
<a class="sourceLine" id="cb12-2" title="2"><span class="co">--</span></a>
<a class="sourceLine" id="cb12-3" title="3"><span class="co">-- Examples of functions provided for a simple one dimensional list, where appropriate</span></a>
<a class="sourceLine" id="cb12-4" title="4"><span class="kw">class</span> <span class="dt">Zipper</span> z <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-5" title="5">  <span class="kw">type</span> <span class="dt">Index</span> z</a>
<a class="sourceLine" id="cb12-6" title="6">  <span class="kw">data</span> <span class="dt">Direction</span> z</a>
<a class="sourceLine" id="cb12-7" title="7"></a>
<a class="sourceLine" id="cb12-8" title="8">  <span class="co">-- | Shift in a direction</span></a>
<a class="sourceLine" id="cb12-9" title="9"><span class="ot">  shift ::</span> <span class="dt">Direction</span> z <span class="ot">-&gt;</span> z a <span class="ot">-&gt;</span> z a</a>
<a class="sourceLine" id="cb12-10" title="10"></a>
<a class="sourceLine" id="cb12-11" title="11">  <span class="co">-- | Retrieve current cursor value</span></a>
<a class="sourceLine" id="cb12-12" title="12"><span class="ot">  cursor ::</span> z a <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb12-13" title="13"></a>
<a class="sourceLine" id="cb12-14" title="14">  <span class="co">-- | Retrieve current index value</span></a>
<a class="sourceLine" id="cb12-15" title="15"><span class="ot">  index ::</span> z a <span class="ot">-&gt;</span> <span class="dt">Index</span> z</a>
<a class="sourceLine" id="cb12-16" title="16"></a>
<a class="sourceLine" id="cb12-17" title="17">  <span class="co">-- | Retrieve neighborhood of current cursor.</span></a>
<a class="sourceLine" id="cb12-18" title="18"><span class="ot">  neighborhood ::</span> z a <span class="ot">-&gt;</span> [a]</a>
<a class="sourceLine" id="cb12-19" title="19"></a>
<a class="sourceLine" id="cb12-20" title="20">  <span class="co">-- | Destruct to list maintaining order of @(Index z)@, e.g. @(Z ls c rs) -&gt; ls ++ [c] ++ rs@.</span></a>
<a class="sourceLine" id="cb12-21" title="21"><span class="ot">  toList ::</span> z a <span class="ot">-&gt;</span> [a]</a>
<a class="sourceLine" id="cb12-22" title="22"></a>
<a class="sourceLine" id="cb12-23" title="23">  <span class="co">-- | Destruct a list into a mapping with indices</span></a>
<a class="sourceLine" id="cb12-24" title="24"><span class="ot">  toMap ::</span> (<span class="dt">Comonad</span> z) <span class="ot">=&gt;</span> z a <span class="ot">-&gt;</span> [(<span class="dt">Index</span> z, a)]</a>
<a class="sourceLine" id="cb12-25" title="25">  toMap <span class="ot">=</span> toList <span class="op">.</span> extend ((,) <span class="op">&lt;$&gt;</span> <span class="fu">index</span> <span class="op">&lt;*&gt;</span> cursor)</a>
<a class="sourceLine" id="cb12-26" title="26"></a>
<a class="sourceLine" id="cb12-27" title="27">  <span class="co">-- | Construct zipper from mapping (provide default value so this is always safe, no bottoms)</span></a>
<a class="sourceLine" id="cb12-28" title="28"><span class="ot">  fromMap ::</span> <span class="dt">Ord</span> (<span class="dt">Index</span> z) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> [(<span class="dt">Index</span> z, a)] <span class="ot">-&gt;</span> z a</a>
<a class="sourceLine" id="cb12-29" title="29"></a>
<a class="sourceLine" id="cb12-30" title="30">  <span class="co">-- | Lookup by possibly denormalised index (still safe from modularity).</span></a>
<a class="sourceLine" id="cb12-31" title="31">  <span class="co">--</span></a>
<a class="sourceLine" id="cb12-32" title="32">  <span class="co">-- e.g. [1,2] ! 2 == 1</span></a>
<a class="sourceLine" id="cb12-33" title="33"><span class="ot">  (!) ::</span> z a <span class="ot">-&gt;</span> (<span class="dt">Index</span> z) <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb12-34" title="34"></a>
<a class="sourceLine" id="cb12-35" title="35">  <span class="co">-- | Adjust value at specified index</span></a>
<a class="sourceLine" id="cb12-36" title="36"><span class="ot">  adjust ::</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">Index</span> z <span class="ot">-&gt;</span> z a <span class="ot">-&gt;</span> z a</a>
<a class="sourceLine" id="cb12-37" title="37"></a>
<a class="sourceLine" id="cb12-38" title="38">  <span class="co">-- | Update value at specified index</span></a>
<a class="sourceLine" id="cb12-39" title="39"><span class="ot">  update ::</span> a <span class="ot">-&gt;</span> <span class="dt">Index</span> z <span class="ot">-&gt;</span> z a <span class="ot">-&gt;</span> z a</a>
<a class="sourceLine" id="cb12-40" title="40">  update <span class="ot">=</span> adjust <span class="op">.</span> <span class="fu">const</span></a>
<a class="sourceLine" id="cb12-41" title="41"></a>
<a class="sourceLine" id="cb12-42" title="42">  <span class="co">-- | Normalize @Index z@ value with respect to modular boundaries</span></a>
<a class="sourceLine" id="cb12-43" title="43"><span class="ot">  normalize ::</span> z a <span class="ot">-&gt;</span> (<span class="dt">Index</span> z) <span class="ot">-&gt;</span> (<span class="dt">Index</span> z)</a>
<a class="sourceLine" id="cb12-44" title="44"></a>
<a class="sourceLine" id="cb12-45" title="45">  <span class="co">-- | Get size (maximum of @Index z@).</span></a>
<a class="sourceLine" id="cb12-46" title="46"><span class="ot">  size ::</span> z a <span class="ot">-&gt;</span> (<span class="dt">Index</span> z)</a></code></pre></div>
<p>I don’t want there to be a billion lines of code in this article, so feel free to check out the <a href="https://github.com/samtay/conway/blob/master/src/Life.hs">source</a> if you want to see how those instances are defined for <code>Z</code> and <code>ZZ</code>. Once they are defined, writing the <code>Comonad</code> instance is much easier:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1"><span class="kw">instance</span> <span class="dt">Comonad</span> <span class="dt">Z</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-2" title="2">  extract <span class="ot">=</span> cursor</a>
<a class="sourceLine" id="cb13-3" title="3">  duplicate z <span class="ot">=</span> <span class="dt">Z</span> (S.fromFunction (size z <span class="op">-</span> <span class="dv">1</span>) fn) z (z <span class="op">^.</span> zi)</a>
<a class="sourceLine" id="cb13-4" title="4">    <span class="kw">where</span> fn k <span class="ot">=</span> compose (k <span class="op">+</span> <span class="dv">1</span>) (shift <span class="dt">L</span>) <span class="op">$</span> z</a>
<a class="sourceLine" id="cb13-5" title="5"></a>
<a class="sourceLine" id="cb13-6" title="6"><span class="kw">instance</span> <span class="dt">Comonad</span> <span class="dt">ZZ</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-7" title="7">  extract <span class="ot">=</span> cursor</a>
<a class="sourceLine" id="cb13-8" title="8">  duplicate z <span class="ot">=</span> <span class="dt">ZZ</span> <span class="op">$</span> <span class="dt">Z</span></a>
<a class="sourceLine" id="cb13-9" title="9">    (fromF (xT <span class="op">-</span> <span class="dv">1</span>) mkCol) (<span class="dt">Z</span> (fromF (yT <span class="op">-</span> <span class="dv">1</span>) (mkRow z)) z y) x</a>
<a class="sourceLine" id="cb13-10" title="10">    <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-11" title="11">      mkRow zx j <span class="ot">=</span> compose (j <span class="op">+</span> <span class="dv">1</span>) (shift <span class="dt">S</span>) zx</a>
<a class="sourceLine" id="cb13-12" title="12">      mkCol i    <span class="ot">=</span> <span class="kw">let</span> zx <span class="ot">=</span> compose (i <span class="op">+</span> <span class="dv">1</span>) (shift <span class="dt">W</span>) z</a>
<a class="sourceLine" id="cb13-13" title="13">                    <span class="kw">in</span> <span class="dt">Z</span> (fromF (yT <span class="op">-</span> <span class="dv">1</span>) (mkRow zx)) zx (zx <span class="op">^.</span> to <span class="fu">index</span>  <span class="op">^.</span> _2)</a>
<a class="sourceLine" id="cb13-14" title="14">      (xT,yT)    <span class="ot">=</span> size z</a>
<a class="sourceLine" id="cb13-15" title="15">      (x,y)      <span class="ot">=</span> <span class="fu">index</span> z</a>
<a class="sourceLine" id="cb13-16" title="16">      fromF      <span class="ot">=</span> S.fromFunction</a>
<a class="sourceLine" id="cb13-17" title="17"></a>
<a class="sourceLine" id="cb13-18" title="18"><span class="ot">compose ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> a)</a>
<a class="sourceLine" id="cb13-19" title="19">compose <span class="ot">=</span> (<span class="fu">foldr</span> (<span class="op">.</span>) <span class="fu">id</span> <span class="op">.</span>) <span class="op">.</span> <span class="fu">replicate</span></a></code></pre></div>
<p>It looks a little messy, but that’s probably just me being an amateur. Really all that <code>duplicate</code> needs to do is, for all indices <code>(i,j)</code>, replace the element at <code>(i,j)</code> with the argument <code>z</code> shifted west <code>i</code> times and shifted south <code>j</code> times; that is, the argument <code>z</code> with cursor/index focused at <code>(i,j)</code>.</p>
<p>Finally, with <code>Zipper</code> and <code>Comonad</code> instances in place, here is the new <code>step</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" title="1"><span class="ot">step ::</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Board</span></a>
<a class="sourceLine" id="cb14-2" title="2">step <span class="ot">=</span> extend rule</a>
<a class="sourceLine" id="cb14-3" title="3">  <span class="kw">where</span> p <span class="ot">=</span> <span class="fu">length</span> <span class="op">.</span> <span class="fu">filter</span> (<span class="op">==</span><span class="dt">Alive</span>) <span class="op">.</span> neighborhood</a>
<a class="sourceLine" id="cb14-4" title="4">        rule z <span class="ot">=</span> <span class="kw">case</span> (cursor z, p z) <span class="kw">of</span></a>
<a class="sourceLine" id="cb14-5" title="5">                   (<span class="dt">Alive</span>, <span class="dv">2</span>) <span class="ot">-&gt;</span> <span class="dt">Alive</span></a>
<a class="sourceLine" id="cb14-6" title="6">                   (<span class="dt">Alive</span>, <span class="dv">3</span>) <span class="ot">-&gt;</span> <span class="dt">Alive</span></a>
<a class="sourceLine" id="cb14-7" title="7">                   (<span class="dt">Dead</span>, <span class="dv">3</span>)  <span class="ot">-&gt;</span> <span class="dt">Alive</span></a>
<a class="sourceLine" id="cb14-8" title="8">                   _          <span class="ot">-&gt;</span> <span class="dt">Dead</span></a></code></pre></div>
<h2 id="performance">Performance</h2>
<p>My profiling methodology for each of the scenarios below is to simply measure against the test suite, which does quite a bit of computing and comparison of evolved games. Below are the commands I used to generate the results:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb15-1" title="1">$ <span class="ex">stack</span> ghc -- test/Spec.hs -prof -fprof-auto -rtsopts -O2</a>
<a class="sourceLine" id="cb15-2" title="2">$ <span class="bu">cd</span> test</a>
<a class="sourceLine" id="cb15-3" title="3">$ <span class="ex">./Spec</span> +RTS -hc -p -K100M</a>
<a class="sourceLine" id="cb15-4" title="4"><span class="co"># getting a web friendly view of heap profiler</span></a>
<a class="sourceLine" id="cb15-5" title="5">$ <span class="ex">hp2ps</span> -e8in -c Spec.hp</a>
<a class="sourceLine" id="cb15-6" title="6">$ <span class="ex">convert</span> Spec.ps heap.png</a></code></pre></div>
<h3 id="initial">Initial</h3>
<p>Here are some profiling details from the first implementation, which mapped across the board while performing lookups to retrieve the neighborhood values:</p>
<ul>
<li>Time: 13.22 secs</li>
<li>Memory: 5.50 GB</li>
<li>Spec.prof &amp; Spec.ps</li>
</ul>
<pre><code>	   Spec +RTS -hc -p -K100M -RTS

	total time  =       13.22 secs   (13219 ticks @ 1000 us, 1 processor)
	total alloc = 5,495,113,024 bytes  (excludes profiling overheads)

COST CENTRE              MODULE                               SRC                                                           %time %alloc

filterWithKey            Math.Geometry.GridMap.Lazy           src/Math/Geometry/GridMap/Lazy.hs:117:3-67                     94.9   75.5
neighboursWrappedBasedOn Math.Geometry.GridInternal           src/Math/Geometry/GridInternal.hs:(295,1)-(296,64)              2.5   11.4
normalise                Math.Geometry.Grid.OctagonalInternal src/Math/Geometry/Grid/OctagonalInternal.hs:(132,3)-(133,25)    1.0    4.3
population               Life                                 src/Life.hs:(120,1)-(122,20)                                    0.6    4.7
elems                    Math.Geometry.GridMap                src/Math/Geometry/GridMap.hs:266:3-25                           0.2    1.7</code></pre>
<p align="center">
<img src="/img/comonadic-gol/initial-heap.png" />
</p>
<p>Quite a bit of memory spent in the <code>step</code> function.</p>
<h3 id="comonads-to-the-rescue">Comonads to the rescue</h3>
<p>Now that the function evolving the game has cursor context and easy access to each cursor’s neighborhood, just a few <code>O(1)</code> lookups at the front and back of <code>Data.Sequence.Seq a</code> containers, performance improves drammatically.</p>
<ul>
<li>Time: 1.08 secs</li>
<li>Memory: 3.95 GB</li>
<li>Spec.prof &amp; Spec.ps</li>
</ul>
<pre><code>	   Spec +RTS -hc -p -K100M -RTS

	total time  =        1.08 secs   (1079 ticks @ 1000 us, 1 processor)
	total alloc = 3,946,769,872 bytes  (excludes profiling overheads)

COST CENTRE     MODULE SRC                           %time %alloc

fmap            Life   src/Life.hs:158:3-41           27.1   22.9
shift           Life   src/Life.hs:(147,3)-(155,38)   25.3   42.1
shift.(...)     Life   src/Life.hs:152:7-27           13.6   22.1
compose         Life   src/Life.hs:298:1-38           10.5    5.4
neighborhood    Life   src/Life.hs:(136,3)-(138,59)    4.3    1.5
step.p          Life   src/Life.hs:256:9-52            3.2    0.4
neighborhood.ew Life   src/Life.hs:196:11-43           2.8    2.7
==              Life   src/Life.hs:70:26-27            2.2    0.7
shift.xs        Life   src/Life.hs:152:7-27            1.7    0.0
duplicate.mkRow Life   src/Life.hs:215:7-47            1.4    0.2
cursor          Life   src/Life.hs:174:3-28            1.2    0.2
duplicate.mkCol Life   src/Life.hs:(216,7)-(217,80)    1.2    0.5</code></pre>
<p align="center">
<img src="/img/comonadic-gol/comonadic-heap.png" />
</p>
<h3 id="comparison">Comparison</h3>
<p>Running the test suite with the second data structure decreased the overall time by <strong>92%</strong> and the overall memory allocation by <strong>28%</strong>.</p>
<h2 id="further-reading">Further reading</h2>
<p>For more in-depth reading on category theory and comonads, here are my sources:</p>
<ul>
<li><a href="http://blog.ezyang.com/2012/10/duality-for-haskellers/">Duality for Haskellers</a> - EZ Yang</li>
<li><a href="http://blog.ezyang.com/2010/07/flipping-arrows-in-coburger-king/">Flipping arrows in coBurger King</a> - EZ Yang</li>
<li><a href="https://www.youtube.com/watch?v=F7F-BzOB670">Comonad presentation</a> - Kenny Foner</li>
<li><a href="https://github.com/kwf/ComonadSheet">ComonadSheet source code</a> - Kenny Foner</li>
<li><a href="https://www.slideshare.net/davidoverton/comonad">Another comonad presentation</a> - David Overton</li>
</ul>
  <div id="disqus_thread"></div>
<script>

//  https://disqus.com/admin/universalcode/#configuration-variables
var disqus_config = function () {
  this.page.url = 'https://samtay.github.io/articles/comonadic-game-of-life.html';
  this.page.identifier = 'articles/comonadic-game-of-life.md';
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '//samtay.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
                            

</div>
]]></summary>
</entry>

</feed>
